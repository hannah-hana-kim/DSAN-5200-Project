[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSAN-5100: Introduction",
    "section": "",
    "text": "See the following link for more information about the author: about me\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\nHIGHLY RECOMMENDED\n\nIt is highly recommended that you build your website using .ipynb files and NOT .qmdfiles\nFunctionally the two formats are basically identical, i.e. they are just Markdown + Code\nHowever there is ONE MAJOR DIFFERENCE, i.e. .ipynb stores the code outputs in the meta-data of the file\n\nThis means you ONLY HAVE TO RUN THE CODE ONCE with .ipynb\n.qmd will run the code every time you build the website, which can be very slow\n\nThere are caching options for .qmd, however, they are “messier” that just using .ipynb\n\nNote: .qmd is fine if there is no code, in which case it is basically just a Markdown file\n\nConverting between the two\n\nYou can switch between the two formats using\nquarto convert clustering.qmd this will output a .ipynb version called clustering.ipynb\nquarto convert eda.ipynb this will output a .qmd version called eda.qmd\n\nYOU CAN RUN R CODE IN VSC WITH .ipynb, see the following link\n\nhttps://saturncloud.io/blog/how-to-use-jupyter-r-kernel-with-visual-studio-code/\n\nIt is possible, but NOT RECOMMENDED, to mix Python and R code in the same file\n\nIMPORTANT ASIDE\n\nA .ipynb file is simply a JSON file with a specialized structural format\nYou can see this by running more eda/eda.ipynb from the command line\nWhich will output the following;\n\n\nTIP FOR MAC USERS\n\ncommand+control+shift+4 is very useful on a mac.\n\nIt takes a screenshot and saves it to the clip-board\n\nThe following VSC extension allows you to paste images from the clip-board with alt+command+v.\n\ntab is your best friend when using the command line, since it does auto-completion\nopen ./path_to_file will open any file or directory from the command line"
  },
  {
    "objectID": "eda/eda.html",
    "href": "eda/eda.html",
    "title": "Data Exploration",
    "section": "",
    "text": "Build out your website tab for exploratory data analysis"
  },
  {
    "objectID": "eda/eda.html#quick-look-at-the-data",
    "href": "eda/eda.html#quick-look-at-the-data",
    "title": "Data Exploration",
    "section": "Quick look at the data",
    "text": "Quick look at the data\n\n# Import seaborn\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Apply the default theme\nsns.set_theme(style=\"whitegrid\", palette=\"pastel\")\n\n# Load an example dataset\ntips = sns.load_dataset(\"tips\")\nprint(tips)\n\n     total_bill   tip     sex smoker   day    time  size\n0         16.99  1.01  Female     No   Sun  Dinner     2\n1         10.34  1.66    Male     No   Sun  Dinner     3\n2         21.01  3.50    Male     No   Sun  Dinner     3\n3         23.68  3.31    Male     No   Sun  Dinner     2\n4         24.59  3.61  Female     No   Sun  Dinner     4\n..          ...   ...     ...    ...   ...     ...   ...\n239       29.03  5.92    Male     No   Sat  Dinner     3\n240       27.18  2.00  Female    Yes   Sat  Dinner     2\n241       22.67  2.00    Male    Yes   Sat  Dinner     2\n242       17.82  1.75    Male     No   Sat  Dinner     2\n243       18.78  3.00  Female     No  Thur  Dinner     2\n\n[244 rows x 7 columns]"
  },
  {
    "objectID": "eda/eda.html#basic-visualization",
    "href": "eda/eda.html#basic-visualization",
    "title": "Data Exploration",
    "section": "Basic visualization",
    "text": "Basic visualization\n\n\n# Create a visualization\nsns.relplot(\n    data=tips,\n    x=\"total_bill\", y=\"tip\", col=\"time\",\n    hue=\"smoker\", style=\"smoker\", size=\"size\",\n)\n\nplt.show()"
  },
  {
    "objectID": "clustering/clustering.html",
    "href": "clustering/clustering.html",
    "title": "Clustering",
    "section": "",
    "text": "Build out your website tab for “clustering”"
  },
  {
    "objectID": "hannah.html",
    "href": "hannah.html",
    "title": "Climate Change and Food Insecurity",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport geopandas as gpd"
  },
  {
    "objectID": "hannah.html#world-population-by-continents",
    "href": "hannah.html#world-population-by-continents",
    "title": "Climate Change and Food Insecurity",
    "section": "World population by continents",
    "text": "World population by continents\n\nworld = pd.read_csv('data/world_population.csv')\nworld_cp = world.copy()\nworld_cp.head()\n\n\n\n\n\n\n\n\n\nRank\nCCA3\nCountry/Territory\nCapital\nContinent\n2022 Population\n2020 Population\n2015 Population\n2010 Population\n2000 Population\n1990 Population\n1980 Population\n1970 Population\nArea (km²)\nDensity (per km²)\nGrowth Rate\nWorld Population Percentage\n\n\n\n\n0\n36\nAFG\nAfghanistan\nKabul\nAsia\n41128771\n38972230\n33753499\n28189672\n19542982\n10694796\n12486631\n10752971\n652230\n63.0587\n1.0257\n0.52\n\n\n1\n138\nALB\nAlbania\nTirana\nEurope\n2842321\n2866849\n2882481\n2913399\n3182021\n3295066\n2941651\n2324731\n28748\n98.8702\n0.9957\n0.04\n\n\n2\n34\nDZA\nAlgeria\nAlgiers\nAfrica\n44903225\n43451666\n39543154\n35856344\n30774621\n25518074\n18739378\n13795915\n2381741\n18.8531\n1.0164\n0.56\n\n\n3\n213\nASM\nAmerican Samoa\nPago Pago\nOceania\n44273\n46189\n51368\n54849\n58230\n47818\n32886\n27075\n199\n222.4774\n0.9831\n0.00\n\n\n4\n203\nAND\nAndorra\nAndorra la Vella\nEurope\n79824\n77700\n71746\n71519\n66097\n53569\n35611\n19860\n468\n170.5641\n1.0100\n0.00\n\n\n\n\n\n\n\n\n\n# drop unnecessary columns\nworld_cp = world_cp.drop(['Rank', 'CCA3', 'Country/Territory', 'Capital', 'Area (km²)', 'Density (per km²)', 'Growth Rate'], axis=1)\n\n# lowercase all the columns\nworld_cp.columns = world_cp.columns.str.lower()\n\n# replace the spaces with underscore\nworld_cp.columns = world_cp.columns.str.replace(' ', '_')\n\n# rename the columns\nworld_cp = world_cp.rename(columns={'2022_population': '2022', '2020_population': '2020', '2015_population': '2015', '2010_population': '2010', '2000_population': '2000', '1990_population': '1990', '1980_population': '1980', '1970_population': '1970'})\nworld_cp.head()\n\n\n\n\n\n\n\n\n\ncontinent\n2022\n2020\n2015\n2010\n2000\n1990\n1980\n1970\nworld_population_percentage\n\n\n\n\n0\nAsia\n41128771\n38972230\n33753499\n28189672\n19542982\n10694796\n12486631\n10752971\n0.52\n\n\n1\nEurope\n2842321\n2866849\n2882481\n2913399\n3182021\n3295066\n2941651\n2324731\n0.04\n\n\n2\nAfrica\n44903225\n43451666\n39543154\n35856344\n30774621\n25518074\n18739378\n13795915\n0.56\n\n\n3\nOceania\n44273\n46189\n51368\n54849\n58230\n47818\n32886\n27075\n0.00\n\n\n4\nEurope\n79824\n77700\n71746\n71519\n66097\n53569\n35611\n19860\n0.00\n\n\n\n\n\n\n\n\n\nojs_define(data = world_cp)\n\n\n\n\n\ndata_t = transpose(data)\nInputs.table(data_t)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot.plot({data_t,\n  color: {legend: true},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY(stocks, {x: \"Date\", y: \"Close\", stroke: \"Symbol\"})\n  ]\n})\n\n\n\n\n\n\n\nPlot.plot({\n  style: \"overflow: visible;\",\n  x: {\n    grid: true,\n    label: \"world_cp\"\n  },\n  y: {\n    grid: true,\n    label: \"Output Units\"\n  },\n  //color: {\n  //  type: \"ordinal\",\n  //  scheme: \"category10\",\n  //  legend: \"ramp\"\n  //},\n  marks: [\n    Plot.ruleX([0]),\n    Plot.ruleY([0]),\n    Plot.line(points, {\n      x:\"labor\",\n      y:\"value\",\n      stroke:\"dep_var\"\n    }),\n    Plot.text(points, Plot.selectLast({\n      x:\"labor\",\n      y:\"value\",\n      z:\"dep_var\",\n      text:\"dep_var\",\n      textAnchor:\"start\",\n      dx: 3\n    }))\n      \n    //Plot.line(marg_prod, {text: \"Marginal Product of Labor\", textAnchor:\"start\", stroke:\"orange\"})\n  ]\n})"
  },
  {
    "objectID": "hannah.html#load-the-data",
    "href": "hannah.html#load-the-data",
    "title": "Climate Change and Food Insecurity",
    "section": "Load the data",
    "text": "Load the data\n\nraw_df = pd.read_csv('./data/FAOSTAT_data.csv')\nraw_df\n\n\n\n\n\n\n\n\n\nDomain Code\nDomain\nArea Code (M49)\nArea\nElement Code\nElement\nItem Code\nItem\nYear Code\nYear\nUnit\nValue\nFlag\nFlag Description\nNote\n\n\n\n\n0\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20002002\n2000-2002\n%\n88\nE\nEstimated value\nNaN\n\n\n1\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20012003\n2001-2003\n%\n89\nE\nEstimated value\nNaN\n\n\n2\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20022004\n2002-2004\n%\n92\nE\nEstimated value\nNaN\n\n\n3\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20032005\n2003-2005\n%\n93\nE\nEstimated value\nNaN\n\n\n4\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20042006\n2004-2006\n%\n94\nE\nEstimated value\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n139523\nFS\nSuite of Food Security Indicators\n716\nZimbabwe\n6123\nValue\n21061\nAverage fat supply (g/cap/day) (3-year average)\n20142016\n2014-2016\ng/pc/d\n69.9\nE\nEstimated value\nNaN\n\n\n139524\nFS\nSuite of Food Security Indicators\n716\nZimbabwe\n6123\nValue\n21061\nAverage fat supply (g/cap/day) (3-year average)\n20152017\n2015-2017\ng/pc/d\n68.6\nE\nEstimated value\nNaN\n\n\n139525\nFS\nSuite of Food Security Indicators\n716\nZimbabwe\n6123\nValue\n21061\nAverage fat supply (g/cap/day) (3-year average)\n20162018\n2016-2018\ng/pc/d\n66.9\nE\nEstimated value\nNaN\n\n\n139526\nFS\nSuite of Food Security Indicators\n716\nZimbabwe\n6123\nValue\n21061\nAverage fat supply (g/cap/day) (3-year average)\n20172019\n2017-2019\ng/pc/d\n63.6\nE\nEstimated value\nNaN\n\n\n139527\nFS\nSuite of Food Security Indicators\n716\nZimbabwe\n6123\nValue\n21061\nAverage fat supply (g/cap/day) (3-year average)\n20182020\n2018-2020\ng/pc/d\n63.3\nE\nEstimated value\nNaN\n\n\n\n\n139528 rows × 15 columns\n\n\n\n\nFood insecurity:\n\nPrevalence of severe food insecurity in the total population (percent): 210401 (M/F)\nPrevalence of moderate or severe food insecurity in the total population (percent): 210091 (M/F)\nNumber of severely food insecure people (million): 210071 (M/F)\nNumber of moderately or severely food insecure people (million): 210081 (M/F)"
  },
  {
    "objectID": "hannah.html#further-cleaning-and-preprocessing",
    "href": "hannah.html#further-cleaning-and-preprocessing",
    "title": "Climate Change and Food Insecurity",
    "section": "Further cleaning and preprocessing",
    "text": "Further cleaning and preprocessing\n\nraw_df.columns = raw_df.columns.str.lower()\nraw_df.columns = raw_df.columns.str.replace(' ', '_')\n# change the area column to country column\nraw_df = raw_df.rename(columns={'area': 'country'})\n\n\n# filter out the data by item code\n# prevalence of severe food insecurity in the total population\nprev_severe_total = raw_df[raw_df['item_code'] == '210401'] \nprev_severe_male = raw_df[raw_df['item_code'] == '210401M']\nprev_sever_female = raw_df[raw_df['item_code'] == '210401F']\n\n# prevalence of moderate or severe food insecurity in the total population\nprev_mod_total = raw_df[raw_df['item_code'] == '210091']\nprev_mod_male = raw_df[raw_df['item_code'] == '210091M']\nprev_mod_female = raw_df[raw_df['item_code'] == '210091F']\n\n\nprev_severe_total.head()\n\n\n\n\n\n\n\n\n\ndomain_code\ndomain\narea_code_(m49)\ncountry\nelement_code\nelement\nitem_code\nitem\nyear_code\nyear\nunit\nvalue\nflag\nflag_description\nnote\n\n\n\n\n140\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n210401\nPrevalence of severe food insecurity in the to...\n20142016\n2014-2016\n%\n14.8\nA\nOfficial figure\nFAO data\n\n\n141\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n210401\nPrevalence of severe food insecurity in the to...\n20152017\n2015-2017\n%\n15.1\nA\nOfficial figure\nFAO data\n\n\n142\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n210401\nPrevalence of severe food insecurity in the to...\n20162018\n2016-2018\n%\n17.3\nA\nOfficial figure\nFAO data\n\n\n143\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n210401\nPrevalence of severe food insecurity in the to...\n20172019\n2017-2019\n%\n17.3\nA\nOfficial figure\nOfficial estimate\n\n\n144\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n210401\nPrevalence of severe food insecurity in the to...\n20182020\n2018-2020\n%\n19.8\nA\nOfficial figure\nOfficial estimate\n\n\n\n\n\n\n\n\n\nprint(prev_severe_total['area_code_(m49)'].unique())\n\n[  4   8  12  16  20  24  28  32  51  36  40  31  44  48  50  52 112  56\n  84 204  60  64  68  70  72  76  96 100 854 108 132 116 120 124 140 148\n 152 159 344 446 156 158 170 174 178 184 188 384 191 192 196 203 408 180\n 208 262 212 214 218 818 222 226 232 233 748 231 242 246 250 258 266 270\n 268 276 288 300 304 308 320 324 624 328 332 340 348 352 356 360 364 368\n 372 376 380 388 392 400 398 404 296 414 417 418 428 422 426 430 434 440\n 442 450 454 458 462 466 470 584 478 480 484 583 496 499 504 508 104 516\n 520 524 528 540 554 558 562 566 570 807 578 512 586 585 275 591 598 600\n 604 608 616 620 630 634 410 498 642 643 646 659 662 670 882 678 682 686\n 688 690 694 702 703 705  90 706 710 728 724 144 729 740 752 756 760 762\n 764 626 768 772 776 780 788 792 795 798 800 804 784 826 834 840 858 860\n 548 862 704 887 894 716]\n\n\n\n# read the data\ncode_df = pd.read_csv('./data/country_annotation.csv')\n\n# drop unnecessary columns\ncode_df = code_df.drop(columns=['code', 'languages'])\n\n# rename the columns\ncode_df = code_df.rename(columns={'name':'country'})\n\ncode_df.head()\n\n\n\n\n\n\n\n\n\ncountry\ncontinent\n\n\n\n\n0\nUnited States\nNorth America\n\n\n1\nDominican Republic\nNorth Americ\n\n\n2\nCanada\nNorth America\n\n\n3\nHonduras\nNorth America\n\n\n4\nCosta Rica\nNorth America\n\n\n\n\n\n\n\n\n\n# copy the dataframe\ndf = prev_severe_total.copy()\n# change the value column type to numeric value\ndf['value'] = pd.to_numeric(df['value'], errors='coerce')\n\n\n# group by the country and get the sum of all the values\ndf = df.groupby('country', as_index=False)['value'].sum().reset_index(drop=True)\ndf\n\n\n\n\n\n\n\n\n\ncountry\nvalue\n\n\n\n\n0\nAfghanistan\n135.3\n\n\n1\nAlbania\n65.5\n\n\n2\nAlgeria\n65.1\n\n\n3\nAmerican Samoa\n0.0\n\n\n4\nAndorra\n0.0\n\n\n...\n...\n...\n\n\n199\nVenezuela (Bolivarian Republic of)\n0.0\n\n\n200\nViet Nam\n2.3\n\n\n201\nYemen\n80.4\n\n\n202\nZambia\n189.4\n\n\n203\nZimbabwe\n234.3\n\n\n\n\n204 rows × 2 columns\n\n\n\n\n\n# merge the region data with the main data\ndf = pd.merge(df, code_df, on='country', how='left')\n\n\ndf\n\n\n\n\n\n\n\n\n\ncountry\nvalue\ncontinent\n\n\n\n\n0\nAfghanistan\n135.3\nAsia\n\n\n1\nAlbania\n65.5\nEurope\n\n\n2\nAlgeria\n65.1\nAfrica\n\n\n3\nAmerican Samoa\n0.0\nOceania\n\n\n4\nAndorra\n0.0\nEurope\n\n\n...\n...\n...\n...\n\n\n199\nVenezuela (Bolivarian Republic of)\n0.0\nNaN\n\n\n200\nViet Nam\n2.3\nNaN\n\n\n201\nYemen\n80.4\nAsia\n\n\n202\nZambia\n189.4\nAfrica\n\n\n203\nZimbabwe\n234.3\nAfrica\n\n\n\n\n204 rows × 3 columns\n\n\n\n\n\n# drop the rows with value 0\ndf = df[df['value'] != 0].reset_index(drop=True)\ndf\n\n\n\n\n\n\n\n\n\ncountry\nvalue\ncontinent\n\n\n\n\n0\nAfghanistan\n135.3\nAsia\n\n\n1\nAlbania\n65.5\nEurope\n\n\n2\nAlgeria\n65.1\nAfrica\n\n\n3\nAngola\n133.5\nAfrica\n\n\n4\nAntigua and Barbuda\n14.2\nNaN\n\n\n...\n...\n...\n...\n\n\n141\nVanuatu\n9.6\nOceania\n\n\n142\nViet Nam\n2.3\nNaN\n\n\n143\nYemen\n80.4\nAsia\n\n\n144\nZambia\n189.4\nAfrica\n\n\n145\nZimbabwe\n234.3\nAfrica\n\n\n\n\n146 rows × 3 columns\n\n\n\n\n\n# dictionary mapping each country to its continent\ncountry_to_continent = {\n    'Antigua and Barbuda': 'North America',\n    'Bahamas': 'North America',\n    'Barbados': 'North America',\n    'Belize': 'North America',\n    'Cabo Verde': 'Africa',\n    'Congo': 'Africa',\n    'Czechia': 'Europe',\n    'Côte d\\'Ivoire': 'Africa',\n    'Eswatini': 'Africa',\n    'Grenada': 'North America',\n    'Haiti': 'North America',\n    'Iran (Islamic Republic of)': 'Asia',\n    'Jamaica': 'North America',\n    'Lao People\\'s Democratic Republic': 'Asia',\n    'Myanmar': 'Asia',\n    'Netherlands (Kingdom of the)': 'Europe',\n    'Republic of Korea': 'Asia',\n    'Republic of Moldova': 'Europe',\n    'Russian Federation': 'Europe',\n    'Saint Kitts and Nevis': 'North America',\n    'Saint Lucia': 'North America',\n    'Saint Vincent and the Grenadines': 'North America',\n    'Sao Tome and Principe': 'Africa',\n    'Trinidad and Tobago': 'North America',\n    'United Kingdom of Great Britain and Northern Ireland': 'Europe',\n    'United Republic of Tanzania': 'Africa',\n    'United States of America': 'North America',\n    'Viet Nam': 'Asia'\n}\n\n# map the country to the continent\ndf['continent'] = df['continent'].fillna(df['country'].map(country_to_continent))\n\ndf\n\n\n\n\n\n\n\n\n\ncountry\nvalue\ncontinent\n\n\n\n\n0\nAfghanistan\n135.3\nAsia\n\n\n1\nAlbania\n65.5\nEurope\n\n\n2\nAlgeria\n65.1\nAfrica\n\n\n3\nAngola\n133.5\nAfrica\n\n\n4\nAntigua and Barbuda\n14.2\nNorth America\n\n\n...\n...\n...\n...\n\n\n141\nVanuatu\n9.6\nOceania\n\n\n142\nViet Nam\n2.3\nAsia\n\n\n143\nYemen\n80.4\nAsia\n\n\n144\nZambia\n189.4\nAfrica\n\n\n145\nZimbabwe\n234.3\nAfrica\n\n\n\n\n146 rows × 3 columns\n\n\n\n\n\n# data sanity check\n# check the continent value\ndf.continent.unique()\n\n# replace the incorrect value\ndf['continent'] = df['continent'].str.replace('North Americ', 'North America')\ndf['continent'] = df['continent'].str.replace('North Americaa', 'North America')\n\n\ndf\n\n\n\n\n\n\n\n\n\ncountry\nvalue\ncontinent\n\n\n\n\n0\nAfghanistan\n135.3\nAsia\n\n\n1\nAlbania\n65.5\nEurope\n\n\n2\nAlgeria\n65.1\nAfrica\n\n\n3\nAngola\n133.5\nAfrica\n\n\n4\nAntigua and Barbuda\n14.2\nNorth America\n\n\n...\n...\n...\n...\n\n\n141\nVanuatu\n9.6\nOceania\n\n\n142\nViet Nam\n2.3\nAsia\n\n\n143\nYemen\n80.4\nAsia\n\n\n144\nZambia\n189.4\nAfrica\n\n\n145\nZimbabwe\n234.3\nAfrica\n\n\n\n\n146 rows × 3 columns"
  },
  {
    "objectID": "hannah.html#data-visualiztion-prevalence-of-severe-food-insecurity-in-the-total-population",
    "href": "hannah.html#data-visualiztion-prevalence-of-severe-food-insecurity-in-the-total-population",
    "title": "Climate Change and Food Insecurity",
    "section": "Data Visualiztion: Prevalence of severe food insecurity in the total population",
    "text": "Data Visualiztion: Prevalence of severe food insecurity in the total population\n\nNested pie chart\n\n# plot a nested pie chart using plotly\nfig = px.sunburst(df, path=['continent', 'country'], values='value', names = 'country', title='Prevalence of severe food insecurity in the total population',color_discrete_sequence=px.colors.qualitative.Set3)\n# change the plot size\nfig.update_layout(width=800, height=800)\nfig.show()\n\n                                                \n\n\n\n\nPacked Bubble chart\n\n# group the df by continent and aggregate the data\ngrouped_df = df.groupby('continent').apply(lambda x: x[['country', 'value']].to_dict(orient='records')).reset_index(name='data')\n\n# convert the grouped DataFrame to a dictionary\nresult_dict = grouped_df.set_index('continent').to_dict(orient='index')\n\nprint(result_dict)\n\n{'Africa': {'data': [{'country': 'Algeria', 'value': 65.1}, {'country': 'Angola', 'value': 133.5}, {'country': 'Benin', 'value': 95.0}, {'country': 'Botswana', 'value': 161.6}, {'country': 'Burkina Faso', 'value': 100.3}, {'country': 'Cabo Verde', 'value': 38.5}, {'country': 'Cameroon', 'value': 185.9}, {'country': 'Central African Republic', 'value': 185.39999999999998}, {'country': 'Comoros', 'value': 54.8}, {'country': 'Congo', 'value': 355.5}, {'country': \"Côte d'Ivoire\", 'value': 59.5}, {'country': 'Democratic Republic of the Congo', 'value': 118.4}, {'country': 'Djibouti', 'value': 33.0}, {'country': 'Egypt', 'value': 55.7}, {'country': 'Eswatini', 'value': 36.6}, {'country': 'Ethiopia', 'value': 115.5}, {'country': 'Gambia', 'value': 151.6}, {'country': 'Ghana', 'value': 42.0}, {'country': 'Guinea', 'value': 338.9}, {'country': 'Guinea-Bissau', 'value': 103.0}, {'country': 'Kenya', 'value': 156.8}, {'country': 'Lesotho', 'value': 119.69999999999999}, {'country': 'Liberia', 'value': 227.39999999999998}, {'country': 'Libya', 'value': 115.1}, {'country': 'Madagascar', 'value': 41.9}, {'country': 'Malawi', 'value': 346.9}, {'country': 'Mauritania', 'value': 44.3}, {'country': 'Mauritius', 'value': 52.0}, {'country': 'Mozambique', 'value': 201.9}, {'country': 'Namibia', 'value': 217.9}, {'country': 'Niger', 'value': 69.0}, {'country': 'Nigeria', 'value': 110.4}, {'country': 'Sao Tome and Principe', 'value': 28.2}, {'country': 'Senegal', 'value': 62.699999999999996}, {'country': 'Seychelles', 'value': 12.9}, {'country': 'Sierra Leone', 'value': 219.3}, {'country': 'Somalia', 'value': 85.1}, {'country': 'South Africa', 'value': 31.4}, {'country': 'South Sudan', 'value': 317.6}, {'country': 'Sudan', 'value': 111.9}, {'country': 'Togo', 'value': 120.5}, {'country': 'Tunisia', 'value': 73.1}, {'country': 'Uganda', 'value': 167.5}, {'country': 'United Republic of Tanzania', 'value': 172.4}, {'country': 'Zambia', 'value': 189.4}, {'country': 'Zimbabwe', 'value': 234.3}]}, 'Asia': {'data': [{'country': 'Afghanistan', 'value': 135.3}, {'country': 'Armenia', 'value': 3.1}, {'country': 'Bangladesh', 'value': 80.1}, {'country': 'Cambodia', 'value': 102.7}, {'country': 'Georgia', 'value': 58.4}, {'country': 'Indonesia', 'value': 3.3}, {'country': 'Iran (Islamic Republic of)', 'value': 59.7}, {'country': 'Israel', 'value': 13.0}, {'country': 'Japan', 'value': 3.7}, {'country': 'Kazakhstan', 'value': 0.5}, {'country': 'Kuwait', 'value': 33.900000000000006}, {'country': 'Kyrgyzstan', 'value': 4.6}, {'country': \"Lao People's Democratic Republic\", 'value': 24.400000000000002}, {'country': 'Lebanon', 'value': 33.8}, {'country': 'Malaysia', 'value': 46.8}, {'country': 'Maldives', 'value': 4.4}, {'country': 'Myanmar', 'value': 10.6}, {'country': 'Nepal', 'value': 78.7}, {'country': 'Pakistan', 'value': 31.0}, {'country': 'Palestine', 'value': 20.1}, {'country': 'Philippines', 'value': 17.7}, {'country': 'Republic of Korea', 'value': 2.1}, {'country': 'Singapore', 'value': 8.3}, {'country': 'Sri Lanka', 'value': 5.8}, {'country': 'Thailand', 'value': 6.0}, {'country': 'United Arab Emirates', 'value': 2.0}, {'country': 'Uzbekistan', 'value': 25.4}, {'country': 'Viet Nam', 'value': 2.3}, {'country': 'Yemen', 'value': 80.4}]}, 'Europe': {'data': [{'country': 'Albania', 'value': 65.5}, {'country': 'Austria', 'value': 8.3}, {'country': 'Belgium', 'value': 3.9000000000000004}, {'country': 'Bosnia and Herzegovina', 'value': 13.9}, {'country': 'Bulgaria', 'value': 17.1}, {'country': 'Croatia', 'value': 7.7}, {'country': 'Czechia', 'value': 5.4}, {'country': 'Denmark', 'value': 8.6}, {'country': 'Estonia', 'value': 5.9}, {'country': 'Finland', 'value': 15.7}, {'country': 'France', 'value': 7.7}, {'country': 'Germany', 'value': 6.4}, {'country': 'Greece', 'value': 16.0}, {'country': 'Hungary', 'value': 10.7}, {'country': 'Iceland', 'value': 10.8}, {'country': 'Ireland', 'value': 22.5}, {'country': 'Italy', 'value': 9.4}, {'country': 'Latvia', 'value': 4.8}, {'country': 'Lithuania', 'value': 12.9}, {'country': 'Luxembourg', 'value': 7.1}, {'country': 'Malta', 'value': 8.9}, {'country': 'Montenegro', 'value': 18.3}, {'country': 'Netherlands (Kingdom of the)', 'value': 10.6}, {'country': 'North Macedonia', 'value': 30.9}, {'country': 'Norway', 'value': 7.7}, {'country': 'Poland', 'value': 5.6}, {'country': 'Portugal', 'value': 24.0}, {'country': 'Republic of Moldova', 'value': 24.9}, {'country': 'Romania', 'value': 30.6}, {'country': 'Russian Federation', 'value': 2.0}, {'country': 'Serbia', 'value': 18.4}, {'country': 'Slovakia', 'value': 8.200000000000001}, {'country': 'Slovenia', 'value': 3.8}, {'country': 'Spain', 'value': 11.1}, {'country': 'Sweden', 'value': 7.9}, {'country': 'Switzerland', 'value': 4.9}, {'country': 'Ukraine', 'value': 17.8}, {'country': 'United Kingdom of Great Britain and Northern Ireland', 'value': 10.4}]}, 'North America': {'data': [{'country': 'Antigua and Barbuda', 'value': 14.2}, {'country': 'Bahamas', 'value': 6.8}, {'country': 'Barbados', 'value': 14.8}, {'country': 'Belize', 'value': 24.0}, {'country': 'Canada', 'value': 4.4}, {'country': 'Costa Rica', 'value': 16.6}, {'country': 'Dominican Republic', 'value': 161.2}, {'country': 'El Salvador', 'value': 102.1}, {'country': 'Grenada', 'value': 39.0}, {'country': 'Guatemala', 'value': 129.3}, {'country': 'Haiti', 'value': 136.9}, {'country': 'Honduras', 'value': 112.4}, {'country': 'Jamaica', 'value': 169.6}, {'country': 'Mexico', 'value': 25.1}, {'country': 'Saint Kitts and Nevis', 'value': 51.6}, {'country': 'Saint Lucia', 'value': 18.0}, {'country': 'Saint Vincent and the Grenadines', 'value': 51.5}, {'country': 'Trinidad and Tobago', 'value': 20.4}, {'country': 'United States of America', 'value': 6.0}]}, 'Oceania': {'data': [{'country': 'Australia', 'value': 23.9}, {'country': 'Fiji', 'value': 12.5}, {'country': 'Kiribati', 'value': 32.0}, {'country': 'New Zealand', 'value': 25.4}, {'country': 'Samoa', 'value': 17.0}, {'country': 'Tonga', 'value': 20.5}, {'country': 'Vanuatu', 'value': 9.6}]}, 'South America': {'data': [{'country': 'Argentina', 'value': 77.2}, {'country': 'Brazil', 'value': 27.7}, {'country': 'Chile', 'value': 24.5}, {'country': 'Ecuador', 'value': 68.8}, {'country': 'Paraguay', 'value': 26.299999999999997}, {'country': 'Suriname', 'value': 14.4}, {'country': 'Uruguay', 'value': 14.3}]}}\n\n\n/var/folders/27/cc8xpbnj4vgc0f2m9xmmtc_r0000gn/T/ipykernel_50598/2385084736.py:2: DeprecationWarning:\n\nDataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n\n\n\n\n# # pass the data to js code\n# from flask import Flask, render_template\n\n# app = Flask(__name__)\n\n# @app.route('/')\n# def index():\n#     return render_template('index.html', data=result_dict)\n\n# if __name__ == '__main__':\n#     app.run(debug=True)\n\n\n\n# load the data\ncleaned_df = pd.read_csv('./data/CleanedData/foodinsecuritybygender.csv', encoding='ISO-8859-1')\n# convert it to dataframe\ncleaned_df = pd.DataFrame(cleaned_df)\ncleaned_df.head()\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nArea\nRegion\nYearPeriod\nPrimaryColonizer\nAVG_PercentFemale\nAVG_PercentMale\n\n\n\n\n0\n1\nAlbania\nEurope\nY20002002\nNaN\nNaN\nNaN\n\n\n1\n2\nAlbania\nEurope\nY20012003\nNaN\nNaN\nNaN\n\n\n2\n3\nAlbania\nEurope\nY20022004\nNaN\nNaN\nNaN\n\n\n3\n4\nAlbania\nEurope\nY20032005\nNaN\nNaN\nNaN\n\n\n4\n5\nAlbania\nEurope\nY20042006\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n\n# fill the null values with 0\ncleaned_df['AVG_PercentFemale']= cleaned_df['AVG_PercentFemale'].fillna(0)\ncleaned_df['AVG_PercentMale']= cleaned_df['AVG_PercentMale'].fillna(0)\n\n# convert the data type to numeric\ncleaned_df['AVG_PercentFemale'] = pd.to_numeric(cleaned_df['AVG_PercentFemale'], errors='coerce')\ncleaned_df['AVG_PercentMale'] = pd.to_numeric(cleaned_df['AVG_PercentMale'], errors='coerce')\n\n# add a new boolean column if the primarycolonizer column is not null\ncleaned_df['colonizer'] = cleaned_df['PrimaryColonizer'].notnull()\n\ncleaned_df\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nArea\nRegion\nYearPeriod\nPrimaryColonizer\nAVG_PercentFemale\nAVG_PercentMale\ncolonizer\n\n\n\n\n0\n1\nAlbania\nEurope\nY20002002\nNaN\n0.0\n0.0\nFalse\n\n\n1\n2\nAlbania\nEurope\nY20012003\nNaN\n0.0\n0.0\nFalse\n\n\n2\n3\nAlbania\nEurope\nY20022004\nNaN\n0.0\n0.0\nFalse\n\n\n3\n4\nAlbania\nEurope\nY20032005\nNaN\n0.0\n0.0\nFalse\n\n\n4\n5\nAlbania\nEurope\nY20042006\nNaN\n0.0\n0.0\nFalse\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1969\n1970\nZimbabwe\nAfrica\nY20162018\nUnited Kingdom of Great Britain and Northern I...\n37.1\n34.6\nTrue\n\n\n1970\n1971\nZimbabwe\nAfrica\nY20172019\nUnited Kingdom of Great Britain and Northern I...\n35.8\n32.5\nTrue\n\n\n1971\n1972\nZimbabwe\nAfrica\nY20182020\nUnited Kingdom of Great Britain and Northern I...\n33.7\n30.6\nTrue\n\n\n1972\n1973\nZimbabwe\nAfrica\nY20192021\nUnited Kingdom of Great Britain and Northern I...\n33.1\n29.6\nTrue\n\n\n1973\n1974\nZimbabwe\nAfrica\nY20202022\nUnited Kingdom of Great Britain and Northern I...\n30.2\n27.0\nTrue\n\n\n\n\n1974 rows × 8 columns\n\n\n\n\n\n# create a packed bubble chart\n\ndef packed_bubble(names, counts, spacing=5):\n    m = plt\n    ''' packed bubble plot using packed_bubbles.html from matplotlib.org '''\n    chart = BubbleChart(area=counts, bubble_spacing=spacing)\n    chart.collapse()\n\n    _, ax = m.subplots(subplot_kw=dict(aspect='equal'))\n    default_colors = m.rcParams['axes.prop_cycle']\n    colors = default_colors.by_key()['color'] * 50\n\n    chart.plot(ax, names, colors)\n    ax.axis('off')\n    ax.relim()\n    ax.autoscale_view()\n    m.show()"
  },
  {
    "objectID": "main.html",
    "href": "main.html",
    "title": "Climate change and food insecurity",
    "section": "",
    "text": "# import necessary variables\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport geopandas as gpd\nimport warnings\nwarnings.filterwarnings('ignore')"
  },
  {
    "objectID": "main.html#data-visualization",
    "href": "main.html#data-visualization",
    "title": "Climate change and food insecurity",
    "section": "Data Visualization",
    "text": "Data Visualization\nPer Capita Food Supply Variability (kcal/cap/day)\n\nFirst Plot\n\n# choropleth\nfig = px.choropleth(df1, locations = 'country',\n                    locationmode='country names',\n                    color=\"value\",\n                    hover_name = 'country',\n                    title = 'Per Capita Food Supply Variability (kcal/cap/day)',\n                    color_continuous_scale=px.colors.sequential.Plasma\n                    )\nfig.update_layout(width=1000, height=800)\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# time series data\ndf2 = df[['country', 'year', 'value']]\n# convert the value column to float\ndf2['value'] = pd.to_numeric(df2['value'], errors='coerce')\n# group the data by country and year\ndf2 = df2.groupby(['country', 'year']).mean().reset_index()\ndf2 = df2.pivot(index='country', columns='year', values='value')\ndf2.head()\n\n\n\n\n\n\n\n\nyear\n2000\n2000-2002\n2001\n2001-2003\n2002\n2002-2004\n2003\n2003-2005\n2004\n2004-2006\n...\n2017\n2017-2019\n2018\n2018-2020\n2019\n2019-2021\n2020\n2020-2022\n2021\n2022\n\n\ncountry\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfghanistan\n223.700588\n59.38\n224.575882\n62.94\n270.487368\n54.16\n271.884737\n52.62\n244.503810\n51.23\n...\n359.908235\n42.872727\n307.894000\n42.986364\n360.781765\n42.558824\n399.280000\n35.960000\n488.925455\n426.945556\n\n\nAlbania\n481.722273\n52.45\n530.579524\n52.79\n520.983636\n53.08\n539.859091\n52.88\n560.862727\n52.99\n...\n928.068947\n30.909091\n1065.682941\n31.566667\n1084.625882\n18.375000\n1200.874667\n18.150000\n2105.637778\n631.747143\n\n\nAlgeria\n553.792500\n45.26\n640.562857\n45.01\n577.152500\n44.92\n653.721364\n44.51\n667.308636\n44.67\n...\n774.687143\n30.085000\n771.723810\n29.955000\n672.041667\n18.253333\n848.272222\n18.907692\n1380.306364\n456.571111\n\n\nAmerican Samoa\n61.052500\nNaN\n61.350000\nNaN\n61.675000\nNaN\n62.000000\nNaN\n50.026000\nNaN\n...\n51.228000\nNaN\n51.228000\nNaN\n51.218000\nNaN\n51.218000\nNaN\n2.035000\n3.020000\n\n\nAndorra\n38.786667\nNaN\n44.412500\nNaN\n40.442222\n0.30\n41.285556\n0.30\n42.087778\n0.30\n...\n51.605000\n0.300000\n51.642500\n0.300000\n51.715000\n0.300000\n57.377143\nNaN\n2.325000\n3.020000\n\n\n\n\n5 rows × 44 columns\n\n\n\n\n\nabsolute_change = df2['2021'] - df2['2000']\nrelative_change = ((df2['2021'] - df2['2000']) / df2['2000']) * 100\n\n\ndf2 = pd.DataFrame({\n    'country': df2.index,\n    '2000': df2['2000'],\n    '2021': df2['2021'],\n    'absolute_change': absolute_change,\n    'relative_change': relative_change\n})\n\ndf2['absolute_change'] = df2['absolute_change'].round(2)\ndf2['relative_change']=df2['relative_change'].apply(lambda x: int(x))\ndf2['relative_change']= df2['relative_change'].astype(str) + '%'\n\n\ndf2.drop(columns=['country'], inplace=True)\ndf2.reset_index(inplace=True)\ndf2.head()\n\n\n\n\n\n\n\n\n\ncountry\n2000\n2021\nabsolute_change\nrelative_change\n\n\n\n\n0\nAfghanistan\n223.700588\n488.925455\n265.22\n118%\n\n\n1\nAlbania\n481.722273\n2105.637778\n1623.92\n337%\n\n\n2\nAlgeria\n553.792500\n1380.306364\n826.51\n149%\n\n\n3\nAmerican Samoa\n61.052500\n2.035000\n-59.02\n-96%\n\n\n4\nAndorra\n38.786667\n2.325000\n-36.46\n-94%\n\n\n\n\n\n\n\n\n\n\nSecond Plot\n\nfig = px.bar(df2, x='country', y=['2000', '2021'],\n             title='Comparison of Values in 2000 and 2021',\n             labels={'value': 'Value', 'variable': 'Year'},\n             hover_data={'absolute_change': True, 'relative_change': True},\n             barmode='group')\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nNumber of children under 5 years of age who are stunted (modeled estimates) (million)\n\n# check the item\nvalue_to_check = 'Number of children under 5 years of age who are stunted (modeled estimates) (million)'\nif value_to_check in df['item'].values:\n    print(\"Exists\")\nelse:\n    print(\"Does not exist\")\n\nExists\n\n\n\n# Number of children under 5 years of age who are stunted (modeled estimates) (million) \ndf3 = df[df['item'] == 'Number of children under 5 years of age who are stunted (modeled estimates) (million)']\n# convert the value column to float\ndf3['value'] = pd.to_numeric(df3['value'], errors='coerce')\n\n# group by country and item\ndf3 = df3.groupby(['country', 'item'], as_index=False)['value'].sum()\n\n# round the value column\n# df3['value'] = df3['value'].round(2)\ndf3.head()\n\n\n\n\n\n\n\n\n\ncountry\nitem\nvalue\n\n\n\n\n0\nAfghanistan\nNumber of children under 5 years of age who ar...\n54.3\n\n\n1\nAlbania\nNumber of children under 5 years of age who ar...\n0.7\n\n\n2\nAlgeria\nNumber of children under 5 years of age who ar...\n11.9\n\n\n3\nAngola\nNumber of children under 5 years of age who ar...\n38.8\n\n\n4\nArgentina\nNumber of children under 5 years of age who ar...\n6.9\n\n\n\n\n\n\n\n\n\n# normalize the data\n\n\n# choropleth\nfig = px.choropleth(df3, locations = 'country',\n                    locationmode='country names',\n                    color=\"value\",\n                    hover_name = 'country',\n                    title = 'Number of children under 5 years of age who are stunted (modeled estimates) (million)',\n                    color_continuous_scale=px.colors.sequential.Plasma\n                    )\nfig.update_layout(width=1000, height=800)\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# import highchart classes\nfrom highcharts_core.chart import Chart\nfrom highcharts_core.global_options.shared_options import SharedOptions\nfrom highcharts_core.options import HighchartsOptions\nfrom highcharts_core.options.plot_options.bar import BarOptions\nfrom highcharts_core.options.series.bar import BarSeries"
  }
]