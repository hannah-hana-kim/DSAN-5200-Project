[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSAN-5100: Introduction",
    "section": "",
    "text": "See the following link for more information about the author: about me\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\nHIGHLY RECOMMENDED\n\nIt is highly recommended that you build your website using .ipynb files and NOT .qmdfiles\nFunctionally the two formats are basically identical, i.e. they are just Markdown + Code\nHowever there is ONE MAJOR DIFFERENCE, i.e. .ipynb stores the code outputs in the meta-data of the file\n\nThis means you ONLY HAVE TO RUN THE CODE ONCE with .ipynb\n.qmd will run the code every time you build the website, which can be very slow\n\nThere are caching options for .qmd, however, they are “messier” that just using .ipynb\n\nNote: .qmd is fine if there is no code, in which case it is basically just a Markdown file\n\nConverting between the two\n\nYou can switch between the two formats using\nquarto convert clustering.qmd this will output a .ipynb version called clustering.ipynb\nquarto convert eda.ipynb this will output a .qmd version called eda.qmd\n\nYOU CAN RUN R CODE IN VSC WITH .ipynb, see the following link\n\nhttps://saturncloud.io/blog/how-to-use-jupyter-r-kernel-with-visual-studio-code/\n\nIt is possible, but NOT RECOMMENDED, to mix Python and R code in the same file\n\nIMPORTANT ASIDE\n\nA .ipynb file is simply a JSON file with a specialized structural format\nYou can see this by running more eda/eda.ipynb from the command line\nWhich will output the following;\n\n\nTIP FOR MAC USERS\n\ncommand+control+shift+4 is very useful on a mac.\n\nIt takes a screenshot and saves it to the clip-board\n\nThe following VSC extension allows you to paste images from the clip-board with alt+command+v.\n\ntab is your best friend when using the command line, since it does auto-completion\nopen ./path_to_file will open any file or directory from the command line"
  },
  {
    "objectID": "eda/eda.html",
    "href": "eda/eda.html",
    "title": "Data Exploration",
    "section": "",
    "text": "Build out your website tab for exploratory data analysis"
  },
  {
    "objectID": "eda/eda.html#quick-look-at-the-data",
    "href": "eda/eda.html#quick-look-at-the-data",
    "title": "Data Exploration",
    "section": "Quick look at the data",
    "text": "Quick look at the data\n\n# Import seaborn\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Apply the default theme\nsns.set_theme(style=\"whitegrid\", palette=\"pastel\")\n\n# Load an example dataset\ntips = sns.load_dataset(\"tips\")\nprint(tips)\n\n     total_bill   tip     sex smoker   day    time  size\n0         16.99  1.01  Female     No   Sun  Dinner     2\n1         10.34  1.66    Male     No   Sun  Dinner     3\n2         21.01  3.50    Male     No   Sun  Dinner     3\n3         23.68  3.31    Male     No   Sun  Dinner     2\n4         24.59  3.61  Female     No   Sun  Dinner     4\n..          ...   ...     ...    ...   ...     ...   ...\n239       29.03  5.92    Male     No   Sat  Dinner     3\n240       27.18  2.00  Female    Yes   Sat  Dinner     2\n241       22.67  2.00    Male    Yes   Sat  Dinner     2\n242       17.82  1.75    Male     No   Sat  Dinner     2\n243       18.78  3.00  Female     No  Thur  Dinner     2\n\n[244 rows x 7 columns]"
  },
  {
    "objectID": "eda/eda.html#basic-visualization",
    "href": "eda/eda.html#basic-visualization",
    "title": "Data Exploration",
    "section": "Basic visualization",
    "text": "Basic visualization\n\n\n# Create a visualization\nsns.relplot(\n    data=tips,\n    x=\"total_bill\", y=\"tip\", col=\"time\",\n    hue=\"smoker\", style=\"smoker\", size=\"size\",\n)\n\nplt.show()"
  },
  {
    "objectID": "clustering/clustering.html",
    "href": "clustering/clustering.html",
    "title": "Clustering",
    "section": "",
    "text": "Build out your website tab for “clustering”"
  },
  {
    "objectID": "hannah.html",
    "href": "hannah.html",
    "title": "Climate Change and Food Insecurity",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.defalut = 'iframe_connected'\nimport plotly.graph_objects as go\nimport geopandas as gpd\nimport circlify\nimport pprint\nfrom plotly.offline import init_notebook_mode\nimport plotly.offline as pyo\n\ninit_notebook_mode(connected=True)  \npyo.init_notebook_mode()\ncustom_colors = ['#11270B', '#140D4F', '#598B2C', '#42CAFD', '#FFA400', '#F5EDF0', '#1C0B19', '#66B3BA']\nColors:\nEurope: #140D4F Africa: #598B2C\n#11270B #42CAFD #FFA400 #F5EDF0 #1C0B19 #66B3BA #92140C"
  },
  {
    "objectID": "hannah.html#world-population-by-continents",
    "href": "hannah.html#world-population-by-continents",
    "title": "Climate Change and Food Insecurity",
    "section": "World population by continents",
    "text": "World population by continents\n\nworld = pd.read_csv('data/world_population.csv')\nworld_cp = world.copy()\nworld_cp.head()\n\n\n\n\n\n\n\n\n\nRank\nCCA3\nCountry/Territory\nCapital\nContinent\n2022 Population\n2020 Population\n2015 Population\n2010 Population\n2000 Population\n1990 Population\n1980 Population\n1970 Population\nArea (km²)\nDensity (per km²)\nGrowth Rate\nWorld Population Percentage\n\n\n\n\n0\n36\nAFG\nAfghanistan\nKabul\nAsia\n41128771\n38972230\n33753499\n28189672\n19542982\n10694796\n12486631\n10752971\n652230\n63.0587\n1.0257\n0.52\n\n\n1\n138\nALB\nAlbania\nTirana\nEurope\n2842321\n2866849\n2882481\n2913399\n3182021\n3295066\n2941651\n2324731\n28748\n98.8702\n0.9957\n0.04\n\n\n2\n34\nDZA\nAlgeria\nAlgiers\nAfrica\n44903225\n43451666\n39543154\n35856344\n30774621\n25518074\n18739378\n13795915\n2381741\n18.8531\n1.0164\n0.56\n\n\n3\n213\nASM\nAmerican Samoa\nPago Pago\nOceania\n44273\n46189\n51368\n54849\n58230\n47818\n32886\n27075\n199\n222.4774\n0.9831\n0.00\n\n\n4\n203\nAND\nAndorra\nAndorra la Vella\nEurope\n79824\n77700\n71746\n71519\n66097\n53569\n35611\n19860\n468\n170.5641\n1.0100\n0.00\n\n\n\n\n\n\n\n\n\n# drop unnecessary columns\nworld_cp = world_cp.drop(['Rank', 'CCA3', 'Country/Territory', 'Capital', 'Area (km²)', 'Density (per km²)', 'Growth Rate'], axis=1)\n\n# lowercase all the columns\nworld_cp.columns = world_cp.columns.str.lower()\n\n# replace the spaces with underscore\nworld_cp.columns = world_cp.columns.str.replace(' ', '_')\n\n# rename the columns\nworld_cp = world_cp.rename(columns={'2022_population': '2022', '2020_population': '2020', '2015_population': '2015', '2010_population': '2010', '2000_population': '2000', '1990_population': '1990', '1980_population': '1980', '1970_population': '1970'})\n\n# reorder the columns\nworld_cp = world_cp[['continent', '1970','1980', '1990', '2000', '2010', '2015', '2020', '2022']]\nworld_cp\n\n\n\n\n\n\n\n\n\ncontinent\n1970\n1980\n1990\n2000\n2010\n2015\n2020\n2022\n\n\n\n\n0\nAsia\n10752971\n12486631\n10694796\n19542982\n28189672\n33753499\n38972230\n41128771\n\n\n1\nEurope\n2324731\n2941651\n3295066\n3182021\n2913399\n2882481\n2866849\n2842321\n\n\n2\nAfrica\n13795915\n18739378\n25518074\n30774621\n35856344\n39543154\n43451666\n44903225\n\n\n3\nOceania\n27075\n32886\n47818\n58230\n54849\n51368\n46189\n44273\n\n\n4\nEurope\n19860\n35611\n53569\n66097\n71519\n71746\n77700\n79824\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nOceania\n9377\n11315\n13454\n14723\n13142\n12182\n11655\n11572\n\n\n230\nAfrica\n76371\n116775\n178529\n270375\n413296\n491824\n556048\n575986\n\n\n231\nAsia\n6843607\n9204938\n13375121\n18628700\n24743946\n28516545\n32284046\n33696614\n\n\n232\nAfrica\n4281671\n5720438\n7686401\n9891136\n13792086\n16248230\n18927715\n20017675\n\n\n233\nAfrica\n5202918\n7049926\n10113893\n11834676\n12839771\n14154937\n15669666\n16320537\n\n\n\n\n234 rows × 9 columns\n\n\n\n\n\n# group the data by continent and get the sum values\nworld_cp_continent = world_cp.groupby('continent', as_index = False).sum().reset_index(drop=True)\nworld_cp_continent\n\n\n\n\n\n\n\n\n\ncontinent\n1970\n1980\n1990\n2000\n2010\n2015\n2020\n2022\n\n\n\n\n0\nAfrica\n365444348\n481536377\n638150629\n818946032\n1055228072\n1201102442\n1360671810\n1426730932\n\n\n1\nAsia\n2144906290\n2635334228\n3210563577\n3735089604\n4220041327\n4458250182\n4663086535\n4721383274\n\n\n2\nEurope\n655923991\n692527159\n720320797\n726093423\n735613934\n741535608\n745792196\n743147538\n\n\n3\nNorth America\n315434606\n368293361\n421266425\n486069584\n542720651\n570383850\n594236593\n600296136\n\n\n4\nOceania\n19480270\n22920240\n26743822\n31222778\n37102764\n40403283\n43933426\n45038554\n\n\n5\nSouth America\n192947156\n241789006\n297146415\n349634282\n393078250\n413134396\n431530043\n436816608\n\n\n\n\n\n\n\n\n\nLine Graph\n\n# define the variables\ntitle = 'Population Growth by Continent'\nlabels = world_cp_continent['continent'].unique().tolist()\ncolors = ['#11270B', '#140D4F', '#598B2C', '#1C0B19', '#66B3BA', '#92140C']\n\n\nmode_size = [4, 4, 4, 4, 4, 4]\nline_size = [2, 2, 2, 2, 2, 2]\n\n# filter out non-numeric column names and convert to integers\nx_data = world_cp_continent.columns[1:][world_cp_continent.columns[1:].str.isnumeric()].astype(int)\n\ny_data = np.array(world_cp_continent.drop(columns='continent').values.tolist())\n\n\nfig = go.Figure()\nfor i in range(len(labels)):\n    fig.add_trace(go.Scatter(x=x_data, y=y_data[i], mode='lines+markers',\n        name=labels[i],\n        line=dict(color=colors[i], width=line_size[i]),\n        # hoverinfo = labels[i] + ' {}M'.format(y_data[0] // 100000000),\n        connectgaps=True,\n        showlegend=True\n    ))\n\n    # endpoints\n    fig.add_trace(go.Scatter(\n        x=[x_data[0], x_data[-1]],\n        y=[y_data[i][0], y_data[i][-1]],\n        hoverinfo='text',\n        text=[labels[i] + ' {}M'.format(y_data[i][0] // 100000000),\n              labels[i] + ' {}M'.format(y_data[i][-1] // 100000000)],\n        mode='markers',\n        marker=dict(color=colors[i], size=mode_size[i]), showlegend=False,\n        \n    ))\n\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Helvetica',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=150,\n        t=110,\n    ),\n    showlegend=True,\n    plot_bgcolor='white',\n    width=1200,\n    height=1100\n)\n\nannotations = []\n\n# adding labels\nfor y_trace, label, color in zip(y_data, labels, colors):\n    # left side of the plot\n    annotations.append(dict(xref='paper', x=0.05, y=y_trace[0],\n                                  xanchor='right', yanchor='middle',\n                                  text=label,\n                                  font=dict(family='Helvetica', size=11),\n                                  showarrow=False\n                            )\n                        )\n    # right side of the plot\n    annotations.append(dict(xref='paper', x=0.95, y=y_trace[-1],\n                                  xanchor='left', yanchor='middle',\n                                  text='{}M'.format(y_trace[-1] // 100000000),\n                                  font=dict(family='Helvetica', size=12),\n                                  showarrow=False))\n\n# add title\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text=title,\n                              font=dict(family='Helvetica', size=20),\n                              showarrow=False))\n\n# add source\nannotations.append(dict(xref='paper', yref='paper', x=0.5, y=-0.1,\n                              xanchor='left', yanchor='top',\n                              text='Source: https://population.un.org/dataportal/',\n                              font=dict(family='Helvetica', size=8),\n                              showarrow=False))\n\nfig.update_layout(annotations=annotations)\n# fig.update_traces(texttemplate='%{text:.2s}', textposition='top center')\n# change the figure size\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# color dictionary\ncolors = {'Europe': '#140D4F', 'Africa': '#598B2C', 'Asia': '#42CAFD', 'Oceania': '#FFA400', 'North America': '#66B3BA', 'South America': '#92140C'}\n\n# plot out a line graph\nplt.figure(figsize=(10, 6))\n\nfor continent in world_cp['continent'].unique():\n    df_continent = world_cp[world_cp['continent'] == continent]\n    plt.plot(df_continent.columns[1:], df_continent.values[0][1:], marker='o', label=continent, color=colors.get(continent))\n\nplt.xlabel('Year')\nplt.ylabel('Population')\nplt.title('Population Growth by Continent')\nplt.xticks(rotation=45)\nplt.legend()\nplt.grid(False)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nraw_df = pd.read_csv('./data/FAOSTAT_data.csv')\nraw_df.head()\n\n\n\n\n\n\n\n\n\nDomain Code\nDomain\nArea Code (M49)\nArea\nElement Code\nElement\nItem Code\nItem\nYear Code\nYear\nUnit\nValue\nFlag\nFlag Description\nNote\n\n\n\n\n0\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20002002\n2000-2002\n%\n88\nE\nEstimated value\nNaN\n\n\n1\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20012003\n2001-2003\n%\n89\nE\nEstimated value\nNaN\n\n\n2\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20022004\n2002-2004\n%\n92\nE\nEstimated value\nNaN\n\n\n3\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20032005\n2003-2005\n%\n93\nE\nEstimated value\nNaN\n\n\n4\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20042006\n2004-2006\n%\n94\nE\nEstimated value\nNaN\n\n\n\n\n\n\n\n\nFood insecurity:\n\nPrevalence of severe food insecurity in the total population (percent): 210401 (M/F)\nPrevalence of moderate or severe food insecurity in the total population (percent): 210091 (M/F)\nNumber of severely food insecure people (million): 210071 (M/F)\nNumber of moderately or severely food insecure people (million): 210081 (M/F)"
  },
  {
    "objectID": "hannah.html#load-the-data",
    "href": "hannah.html#load-the-data",
    "title": "Climate Change and Food Insecurity",
    "section": "Load the data",
    "text": "Load the data\n\nraw_df = pd.read_csv('./data/FAOSTAT_data.csv')\nraw_df\n\n\n\n\n\n\n\n\n\nDomain Code\nDomain\nArea Code (M49)\nArea\nElement Code\nElement\nItem Code\nItem\nYear Code\nYear\nUnit\nValue\nFlag\nFlag Description\nNote\n\n\n\n\n0\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20002002\n2000-2002\n%\n88\nE\nEstimated value\nNaN\n\n\n1\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20012003\n2001-2003\n%\n89\nE\nEstimated value\nNaN\n\n\n2\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20022004\n2002-2004\n%\n92\nE\nEstimated value\nNaN\n\n\n3\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20032005\n2003-2005\n%\n93\nE\nEstimated value\nNaN\n\n\n4\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n21010\nAverage dietary energy supply adequacy (percen...\n20042006\n2004-2006\n%\n94\nE\nEstimated value\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n139523\nFS\nSuite of Food Security Indicators\n716\nZimbabwe\n6123\nValue\n21061\nAverage fat supply (g/cap/day) (3-year average)\n20142016\n2014-2016\ng/pc/d\n69.9\nE\nEstimated value\nNaN\n\n\n139524\nFS\nSuite of Food Security Indicators\n716\nZimbabwe\n6123\nValue\n21061\nAverage fat supply (g/cap/day) (3-year average)\n20152017\n2015-2017\ng/pc/d\n68.6\nE\nEstimated value\nNaN\n\n\n139525\nFS\nSuite of Food Security Indicators\n716\nZimbabwe\n6123\nValue\n21061\nAverage fat supply (g/cap/day) (3-year average)\n20162018\n2016-2018\ng/pc/d\n66.9\nE\nEstimated value\nNaN\n\n\n139526\nFS\nSuite of Food Security Indicators\n716\nZimbabwe\n6123\nValue\n21061\nAverage fat supply (g/cap/day) (3-year average)\n20172019\n2017-2019\ng/pc/d\n63.6\nE\nEstimated value\nNaN\n\n\n139527\nFS\nSuite of Food Security Indicators\n716\nZimbabwe\n6123\nValue\n21061\nAverage fat supply (g/cap/day) (3-year average)\n20182020\n2018-2020\ng/pc/d\n63.3\nE\nEstimated value\nNaN\n\n\n\n\n139528 rows × 15 columns\n\n\n\n\nFood insecurity:\n\nPrevalence of severe food insecurity in the total population (percent): 210401 (M/F)\nPrevalence of moderate or severe food insecurity in the total population (percent): 210091 (M/F)\nNumber of severely food insecure people (million): 210071 (M/F)\nNumber of moderately or severely food insecure people (million): 210081 (M/F)"
  },
  {
    "objectID": "hannah.html#further-cleaning-and-preprocessing",
    "href": "hannah.html#further-cleaning-and-preprocessing",
    "title": "Climate Change and Food Insecurity",
    "section": "Further cleaning and preprocessing",
    "text": "Further cleaning and preprocessing\n\nraw_df.columns = raw_df.columns.str.lower()\nraw_df.columns = raw_df.columns.str.replace(' ', '_')\n# change the area column to country column\nraw_df = raw_df.rename(columns={'area': 'country'})\n\n\n# filter out the data by item code\n# prevalence of severe food insecurity in the total population\nprev_severe_total = raw_df[raw_df['item_code'] == '210401'] \nprev_severe_male = raw_df[raw_df['item_code'] == '210401M']\nprev_sever_female = raw_df[raw_df['item_code'] == '210401F']\n\n# prevalence of moderate or severe food insecurity in the total population\nprev_mod_total = raw_df[raw_df['item_code'] == '210091']\nprev_mod_male = raw_df[raw_df['item_code'] == '210091M']\nprev_mod_female = raw_df[raw_df['item_code'] == '210091F']\n\n\nprev_severe_total.head()\n\n\n\n\n\n\n\n\n\ndomain_code\ndomain\narea_code_(m49)\ncountry\nelement_code\nelement\nitem_code\nitem\nyear_code\nyear\nunit\nvalue\nflag\nflag_description\nnote\n\n\n\n\n140\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n210401\nPrevalence of severe food insecurity in the to...\n20142016\n2014-2016\n%\n14.8\nA\nOfficial figure\nFAO data\n\n\n141\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n210401\nPrevalence of severe food insecurity in the to...\n20152017\n2015-2017\n%\n15.1\nA\nOfficial figure\nFAO data\n\n\n142\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n210401\nPrevalence of severe food insecurity in the to...\n20162018\n2016-2018\n%\n17.3\nA\nOfficial figure\nFAO data\n\n\n143\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n210401\nPrevalence of severe food insecurity in the to...\n20172019\n2017-2019\n%\n17.3\nA\nOfficial figure\nOfficial estimate\n\n\n144\nFS\nSuite of Food Security Indicators\n4\nAfghanistan\n6121\nValue\n210401\nPrevalence of severe food insecurity in the to...\n20182020\n2018-2020\n%\n19.8\nA\nOfficial figure\nOfficial estimate\n\n\n\n\n\n\n\n\n\n# read the data\ncode_df = pd.read_csv('./data/country_annotation.csv')\n\n# drop unnecessary columns\ncode_df = code_df.drop(columns=['code', 'languages'])\n\n# rename the columns\ncode_df = code_df.rename(columns={'name':'country'})\n\ncode_df.head()\n\n\n\n\n\n\n\n\n\ncountry\ncontinent\n\n\n\n\n0\nUnited States\nNorth America\n\n\n1\nDominican Republic\nNorth Americ\n\n\n2\nCanada\nNorth America\n\n\n3\nHonduras\nNorth America\n\n\n4\nCosta Rica\nNorth America\n\n\n\n\n\n\n\n\n\n# copy the dataframe\ndf = prev_severe_total.copy()\n# change the value column type to numeric value\ndf['value'] = pd.to_numeric(df['value'], errors='coerce')\n\n\n# group by the country and get the sum of all the values\ndf = df.groupby('country', as_index=False)['value'].sum().reset_index(drop=True)\ndf.head()\n\n\n\n\n\n\n\n\n\ncountry\nvalue\n\n\n\n\n0\nAfghanistan\n135.3\n\n\n1\nAlbania\n65.5\n\n\n2\nAlgeria\n65.1\n\n\n3\nAmerican Samoa\n0.0\n\n\n4\nAndorra\n0.0\n\n\n\n\n\n\n\n\n\n# merge the region data with the main data\ndf = pd.merge(df, code_df, on='country', how='left')\n\n\n# drop the rows with value 0\ndf = df[df['value'] != 0].reset_index(drop=True)\ndf\n\n\n\n\n\n\n\n\n\ncountry\nvalue\ncontinent\n\n\n\n\n0\nAfghanistan\n135.3\nAsia\n\n\n1\nAlbania\n65.5\nEurope\n\n\n2\nAlgeria\n65.1\nAfrica\n\n\n3\nAngola\n133.5\nAfrica\n\n\n4\nAntigua and Barbuda\n14.2\nNaN\n\n\n...\n...\n...\n...\n\n\n141\nVanuatu\n9.6\nOceania\n\n\n142\nViet Nam\n2.3\nNaN\n\n\n143\nYemen\n80.4\nAsia\n\n\n144\nZambia\n189.4\nAfrica\n\n\n145\nZimbabwe\n234.3\nAfrica\n\n\n\n\n146 rows × 3 columns\n\n\n\n\n\n# dictionary mapping each country to its continent\ncountry_to_continent = {\n    'Antigua and Barbuda': 'North America',\n    'Bahamas': 'North America',\n    'Barbados': 'North America',\n    'Belize': 'North America',\n    'Cabo Verde': 'Africa',\n    'Congo': 'Africa',\n    'Czechia': 'Europe',\n    'Côte d\\'Ivoire': 'Africa',\n    'Eswatini': 'Africa',\n    'Grenada': 'North America',\n    'Haiti': 'North America',\n    'Iran (Islamic Republic of)': 'Asia',\n    'Jamaica': 'North America',\n    'Lao People\\'s Democratic Republic': 'Asia',\n    'Myanmar': 'Asia',\n    'Netherlands (Kingdom of the)': 'Europe',\n    'Republic of Korea': 'Asia',\n    'Republic of Moldova': 'Europe',\n    'Russian Federation': 'Europe',\n    'Saint Kitts and Nevis': 'North America',\n    'Saint Lucia': 'North America',\n    'Saint Vincent and the Grenadines': 'North America',\n    'Sao Tome and Principe': 'Africa',\n    'Trinidad and Tobago': 'North America',\n    'United Kingdom of Great Britain and Northern Ireland': 'Europe',\n    'United Republic of Tanzania': 'Africa',\n    'United States of America': 'North America',\n    'Viet Nam': 'Asia'\n}\n\n# map the country to the continent\ndf['continent'] = df['continent'].fillna(df['country'].map(country_to_continent))\n\ndf\n\n\n\n\n\n\n\n\n\ncountry\nvalue\ncontinent\n\n\n\n\n0\nAfghanistan\n135.3\nAsia\n\n\n1\nAlbania\n65.5\nEurope\n\n\n2\nAlgeria\n65.1\nAfrica\n\n\n3\nAngola\n133.5\nAfrica\n\n\n4\nAntigua and Barbuda\n14.2\nNorth America\n\n\n...\n...\n...\n...\n\n\n141\nVanuatu\n9.6\nOceania\n\n\n142\nViet Nam\n2.3\nAsia\n\n\n143\nYemen\n80.4\nAsia\n\n\n144\nZambia\n189.4\nAfrica\n\n\n145\nZimbabwe\n234.3\nAfrica\n\n\n\n\n146 rows × 3 columns\n\n\n\n\n\n# data sanity check\n# check the continent value\ndf.continent.unique()\n\n# replace the incorrect value\ndf['continent'] = df['continent'].str.replace('North Americ', 'North America')\ndf['continent'] = df['continent'].str.replace('North Americaa', 'North America')\n\n\ndf\n\n\n\n\n\n\n\n\n\ncountry\nvalue\ncontinent\n\n\n\n\n0\nAfghanistan\n135.3\nAsia\n\n\n1\nAlbania\n65.5\nEurope\n\n\n2\nAlgeria\n65.1\nAfrica\n\n\n3\nAngola\n133.5\nAfrica\n\n\n4\nAntigua and Barbuda\n14.2\nNorth America\n\n\n...\n...\n...\n...\n\n\n141\nVanuatu\n9.6\nOceania\n\n\n142\nViet Nam\n2.3\nAsia\n\n\n143\nYemen\n80.4\nAsia\n\n\n144\nZambia\n189.4\nAfrica\n\n\n145\nZimbabwe\n234.3\nAfrica\n\n\n\n\n146 rows × 3 columns"
  },
  {
    "objectID": "hannah.html#data-visualiztion-prevalence-of-severe-food-insecurity-in-the-total-population",
    "href": "hannah.html#data-visualiztion-prevalence-of-severe-food-insecurity-in-the-total-population",
    "title": "Climate Change and Food Insecurity",
    "section": "Data Visualiztion: Prevalence of severe food insecurity in the total population",
    "text": "Data Visualiztion: Prevalence of severe food insecurity in the total population\n\nNested pie chart\n\n# plot a nested pie chart using plotly\nfig = px.sunburst(df, path=['continent', 'country'], values='value', names = 'country', title='Prevalence of severe food insecurity in the total population',color_discrete_sequence=custom_colors)\n# change the plot size\nfig.update_layout(width=800, height=800)\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\nPacked Bubble chart\n\n# group the df by continent and aggregate the data\ngrouped_df = df.groupby('continent').apply(lambda x: x[['country', 'value']].to_dict(orient='records')).reset_index(name='data')\n\n# convert the grouped DataFrame to a dictionary\nresult_dict = grouped_df.set_index('continent').to_dict(orient='index')\n\nprint(result_dict)\n\n{'Africa': {'data': [{'country': 'Algeria', 'value': 65.1}, {'country': 'Angola', 'value': 133.5}, {'country': 'Benin', 'value': 95.0}, {'country': 'Botswana', 'value': 161.6}, {'country': 'Burkina Faso', 'value': 100.3}, {'country': 'Cabo Verde', 'value': 38.5}, {'country': 'Cameroon', 'value': 185.9}, {'country': 'Central African Republic', 'value': 185.39999999999998}, {'country': 'Comoros', 'value': 54.8}, {'country': 'Congo', 'value': 355.5}, {'country': \"Côte d'Ivoire\", 'value': 59.5}, {'country': 'Democratic Republic of the Congo', 'value': 118.4}, {'country': 'Djibouti', 'value': 33.0}, {'country': 'Egypt', 'value': 55.7}, {'country': 'Eswatini', 'value': 36.6}, {'country': 'Ethiopia', 'value': 115.5}, {'country': 'Gambia', 'value': 151.6}, {'country': 'Ghana', 'value': 42.0}, {'country': 'Guinea', 'value': 338.9}, {'country': 'Guinea-Bissau', 'value': 103.0}, {'country': 'Kenya', 'value': 156.8}, {'country': 'Lesotho', 'value': 119.69999999999999}, {'country': 'Liberia', 'value': 227.39999999999998}, {'country': 'Libya', 'value': 115.1}, {'country': 'Madagascar', 'value': 41.9}, {'country': 'Malawi', 'value': 346.9}, {'country': 'Mauritania', 'value': 44.3}, {'country': 'Mauritius', 'value': 52.0}, {'country': 'Mozambique', 'value': 201.9}, {'country': 'Namibia', 'value': 217.9}, {'country': 'Niger', 'value': 69.0}, {'country': 'Nigeria', 'value': 110.4}, {'country': 'Sao Tome and Principe', 'value': 28.2}, {'country': 'Senegal', 'value': 62.699999999999996}, {'country': 'Seychelles', 'value': 12.9}, {'country': 'Sierra Leone', 'value': 219.3}, {'country': 'Somalia', 'value': 85.1}, {'country': 'South Africa', 'value': 31.4}, {'country': 'South Sudan', 'value': 317.6}, {'country': 'Sudan', 'value': 111.9}, {'country': 'Togo', 'value': 120.5}, {'country': 'Tunisia', 'value': 73.1}, {'country': 'Uganda', 'value': 167.5}, {'country': 'United Republic of Tanzania', 'value': 172.4}, {'country': 'Zambia', 'value': 189.4}, {'country': 'Zimbabwe', 'value': 234.3}]}, 'Asia': {'data': [{'country': 'Afghanistan', 'value': 135.3}, {'country': 'Armenia', 'value': 3.1}, {'country': 'Bangladesh', 'value': 80.1}, {'country': 'Cambodia', 'value': 102.7}, {'country': 'Georgia', 'value': 58.4}, {'country': 'Indonesia', 'value': 3.3}, {'country': 'Iran (Islamic Republic of)', 'value': 59.7}, {'country': 'Israel', 'value': 13.0}, {'country': 'Japan', 'value': 3.7}, {'country': 'Kazakhstan', 'value': 0.5}, {'country': 'Kuwait', 'value': 33.900000000000006}, {'country': 'Kyrgyzstan', 'value': 4.6}, {'country': \"Lao People's Democratic Republic\", 'value': 24.400000000000002}, {'country': 'Lebanon', 'value': 33.8}, {'country': 'Malaysia', 'value': 46.8}, {'country': 'Maldives', 'value': 4.4}, {'country': 'Myanmar', 'value': 10.6}, {'country': 'Nepal', 'value': 78.7}, {'country': 'Pakistan', 'value': 31.0}, {'country': 'Palestine', 'value': 20.1}, {'country': 'Philippines', 'value': 17.7}, {'country': 'Republic of Korea', 'value': 2.1}, {'country': 'Singapore', 'value': 8.3}, {'country': 'Sri Lanka', 'value': 5.8}, {'country': 'Thailand', 'value': 6.0}, {'country': 'United Arab Emirates', 'value': 2.0}, {'country': 'Uzbekistan', 'value': 25.4}, {'country': 'Viet Nam', 'value': 2.3}, {'country': 'Yemen', 'value': 80.4}]}, 'Europe': {'data': [{'country': 'Albania', 'value': 65.5}, {'country': 'Austria', 'value': 8.3}, {'country': 'Belgium', 'value': 3.9000000000000004}, {'country': 'Bosnia and Herzegovina', 'value': 13.9}, {'country': 'Bulgaria', 'value': 17.1}, {'country': 'Croatia', 'value': 7.7}, {'country': 'Czechia', 'value': 5.4}, {'country': 'Denmark', 'value': 8.6}, {'country': 'Estonia', 'value': 5.9}, {'country': 'Finland', 'value': 15.7}, {'country': 'France', 'value': 7.7}, {'country': 'Germany', 'value': 6.4}, {'country': 'Greece', 'value': 16.0}, {'country': 'Hungary', 'value': 10.7}, {'country': 'Iceland', 'value': 10.8}, {'country': 'Ireland', 'value': 22.5}, {'country': 'Italy', 'value': 9.4}, {'country': 'Latvia', 'value': 4.8}, {'country': 'Lithuania', 'value': 12.9}, {'country': 'Luxembourg', 'value': 7.1}, {'country': 'Malta', 'value': 8.9}, {'country': 'Montenegro', 'value': 18.3}, {'country': 'Netherlands (Kingdom of the)', 'value': 10.6}, {'country': 'North Macedonia', 'value': 30.9}, {'country': 'Norway', 'value': 7.7}, {'country': 'Poland', 'value': 5.6}, {'country': 'Portugal', 'value': 24.0}, {'country': 'Republic of Moldova', 'value': 24.9}, {'country': 'Romania', 'value': 30.6}, {'country': 'Russian Federation', 'value': 2.0}, {'country': 'Serbia', 'value': 18.4}, {'country': 'Slovakia', 'value': 8.200000000000001}, {'country': 'Slovenia', 'value': 3.8}, {'country': 'Spain', 'value': 11.1}, {'country': 'Sweden', 'value': 7.9}, {'country': 'Switzerland', 'value': 4.9}, {'country': 'Ukraine', 'value': 17.8}, {'country': 'United Kingdom of Great Britain and Northern Ireland', 'value': 10.4}]}, 'North America': {'data': [{'country': 'Antigua and Barbuda', 'value': 14.2}, {'country': 'Bahamas', 'value': 6.8}, {'country': 'Barbados', 'value': 14.8}, {'country': 'Belize', 'value': 24.0}, {'country': 'Canada', 'value': 4.4}, {'country': 'Costa Rica', 'value': 16.6}, {'country': 'Dominican Republic', 'value': 161.2}, {'country': 'El Salvador', 'value': 102.1}, {'country': 'Grenada', 'value': 39.0}, {'country': 'Guatemala', 'value': 129.3}, {'country': 'Haiti', 'value': 136.9}, {'country': 'Honduras', 'value': 112.4}, {'country': 'Jamaica', 'value': 169.6}, {'country': 'Mexico', 'value': 25.1}, {'country': 'Saint Kitts and Nevis', 'value': 51.6}, {'country': 'Saint Lucia', 'value': 18.0}, {'country': 'Saint Vincent and the Grenadines', 'value': 51.5}, {'country': 'Trinidad and Tobago', 'value': 20.4}, {'country': 'United States of America', 'value': 6.0}]}, 'Oceania': {'data': [{'country': 'Australia', 'value': 23.9}, {'country': 'Fiji', 'value': 12.5}, {'country': 'Kiribati', 'value': 32.0}, {'country': 'New Zealand', 'value': 25.4}, {'country': 'Samoa', 'value': 17.0}, {'country': 'Tonga', 'value': 20.5}, {'country': 'Vanuatu', 'value': 9.6}]}, 'South America': {'data': [{'country': 'Argentina', 'value': 77.2}, {'country': 'Brazil', 'value': 27.7}, {'country': 'Chile', 'value': 24.5}, {'country': 'Ecuador', 'value': 68.8}, {'country': 'Paraguay', 'value': 26.299999999999997}, {'country': 'Suriname', 'value': 14.4}, {'country': 'Uruguay', 'value': 14.3}]}}\n\n\n/var/folders/27/cc8xpbnj4vgc0f2m9xmmtc_r0000gn/T/ipykernel_45541/2385084736.py:2: DeprecationWarning:\n\nDataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n\n\n\n\n\n# load the data\ncleaned_df = pd.read_csv('./data/CleanedData/foodinsecuritybygender.csv', encoding='ISO-8859-1')\n# convert it to dataframe\ncleaned_df = pd.DataFrame(cleaned_df)\ncleaned_df.head()\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nArea\nRegion\nYearPeriod\nPrimaryColonizer\nAVG_PercentFemale\nAVG_PercentMale\n\n\n\n\n0\n1\nAlbania\nEurope\nY20002002\nNaN\nNaN\nNaN\n\n\n1\n2\nAlbania\nEurope\nY20012003\nNaN\nNaN\nNaN\n\n\n2\n3\nAlbania\nEurope\nY20022004\nNaN\nNaN\nNaN\n\n\n3\n4\nAlbania\nEurope\nY20032005\nNaN\nNaN\nNaN\n\n\n4\n5\nAlbania\nEurope\nY20042006\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n\n# fill the null values with 0\ncleaned_df['AVG_PercentFemale']= cleaned_df['AVG_PercentFemale'].fillna(0)\ncleaned_df['AVG_PercentMale']= cleaned_df['AVG_PercentMale'].fillna(0)\n\n# convert the data type to numeric\ncleaned_df['AVG_PercentFemale'] = pd.to_numeric(cleaned_df['AVG_PercentFemale'], errors='coerce')\ncleaned_df['AVG_PercentMale'] = pd.to_numeric(cleaned_df['AVG_PercentMale'], errors='coerce')\n\n# add a new boolean column if the primarycolonizer column is not null\ncleaned_df['colonizer'] = cleaned_df['PrimaryColonizer'].notnull()\n\ncleaned_df\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nArea\nRegion\nYearPeriod\nPrimaryColonizer\nAVG_PercentFemale\nAVG_PercentMale\ncolonizer\n\n\n\n\n0\n1\nAlbania\nEurope\nY20002002\nNaN\n0.0\n0.0\nFalse\n\n\n1\n2\nAlbania\nEurope\nY20012003\nNaN\n0.0\n0.0\nFalse\n\n\n2\n3\nAlbania\nEurope\nY20022004\nNaN\n0.0\n0.0\nFalse\n\n\n3\n4\nAlbania\nEurope\nY20032005\nNaN\n0.0\n0.0\nFalse\n\n\n4\n5\nAlbania\nEurope\nY20042006\nNaN\n0.0\n0.0\nFalse\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1969\n1970\nZimbabwe\nAfrica\nY20162018\nUnited Kingdom of Great Britain and Northern I...\n37.1\n34.6\nTrue\n\n\n1970\n1971\nZimbabwe\nAfrica\nY20172019\nUnited Kingdom of Great Britain and Northern I...\n35.8\n32.5\nTrue\n\n\n1971\n1972\nZimbabwe\nAfrica\nY20182020\nUnited Kingdom of Great Britain and Northern I...\n33.7\n30.6\nTrue\n\n\n1972\n1973\nZimbabwe\nAfrica\nY20192021\nUnited Kingdom of Great Britain and Northern I...\n33.1\n29.6\nTrue\n\n\n1973\n1974\nZimbabwe\nAfrica\nY20202022\nUnited Kingdom of Great Britain and Northern I...\n30.2\n27.0\nTrue\n\n\n\n\n1974 rows × 8 columns\n\n\n\n\n\n# drop the year column\nanother_df = cleaned_df.drop(columns=['YearPeriod', 'Unnamed: 0', 'PrimaryColonizer', 'colonizer'])\n# group by the country and get the sum of all the values\nanother_df = another_df.groupby(['Area', 'Region'], as_index=False).sum().reset_index(drop=True)\nanother_df.head()\n\n\n\n\n\n\n\n\n\nArea\nRegion\nAVG_PercentFemale\nAVG_PercentMale\n\n\n\n\n0\nAlbania\nEurope\n73.8\n57.2\n\n\n1\nAlgeria\nAfrica\n67.5\n62.9\n\n\n2\nAndorra\nEurope\n0.0\n0.0\n\n\n3\nAngola\nAfrica\n139.6\n127.7\n\n\n4\nAustria\nEurope\n8.5\n8.1\n\n\n\n\n\n\n\n\n\n# group by region again\nregion_sum = another_df.groupby('Region').agg({'AVG_PercentFemale': 'sum', 'AVG_PercentMale': 'sum'}).reset_index()\n# convert the column to numerical value\nregion_sum['AVG_PercentFemale'] = pd.to_numeric(region_sum['AVG_PercentFemale'], errors='coerce')\nregion_sum['AVG_PercentMale'] = pd.to_numeric(region_sum['AVG_PercentMale'], errors='coerce')\n# round the value\nregion_sum['AVG_PercentFemale'] = region_sum['AVG_PercentFemale'].round(2)\nregion_sum['AVG_PercentMale'] = region_sum['AVG_PercentMale'].round(2)\nregion_sum\n\n\n\n\n\n\n\n\n\nRegion\nAVG_PercentFemale\nAVG_PercentMale\n\n\n\n\n0\nAfrica\n6061.9\n5860.8\n\n\n1\nEurope\n520.5\n492.7\n\n\n\n\n\n\n\n\n\n# merge the sum with the original DataFrame based on 'Region'\ndf_merged = another_df.merge(region_sum, on='Region', suffixes=('', '_Sum'))\n# change the column name\ndf_merged = df_merged.rename(columns={'AVG_PercentFemale_Sum': 'Continent_Sum_Female', 'AVG_PercentMale_Sum': 'Continent_Sum_Male'})\ndf_merged\n\n\n\n\n\n\n\n\n\nArea\nRegion\nAVG_PercentFemale\nAVG_PercentMale\nContinent_Sum_Female\nContinent_Sum_Male\n\n\n\n\n0\nAlbania\nEurope\n73.8\n57.2\n520.5\n492.7\n\n\n1\nAlgeria\nAfrica\n67.5\n62.9\n6061.9\n5860.8\n\n\n2\nAndorra\nEurope\n0.0\n0.0\n520.5\n492.7\n\n\n3\nAngola\nAfrica\n139.6\n127.7\n6061.9\n5860.8\n\n\n4\nAustria\nEurope\n8.5\n8.1\n520.5\n492.7\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n89\nUkraine\nEurope\n18.6\n16.9\n520.5\n492.7\n\n\n90\nUnited Kingdom of Great Britain and Northern I...\nEurope\n11.6\n9.4\n520.5\n492.7\n\n\n91\nUnited Republic of Tanzania\nAfrica\n177.6\n167.6\n6061.9\n5860.8\n\n\n92\nZambia\nAfrica\n189.1\n189.6\n6061.9\n5860.8\n\n\n93\nZimbabwe\nAfrica\n243.6\n225.1\n6061.9\n5860.8\n\n\n\n\n94 rows × 6 columns\n\n\n\n\n\n# convert all the numerical columns to integer type\ndf_merged['AVG_PercentFemale'] = df_merged['AVG_PercentFemale'].astype(int)\ndf_merged['AVG_PercentMale'] = df_merged['AVG_PercentMale'].astype(int)\ndf_merged['Continent_Sum_Female'] = df_merged['Continent_Sum_Female'].astype(int)\ndf_merged['Continent_Sum_Male'] = df_merged['Continent_Sum_Male'].astype(int)\n\n# df_merged['AVG_PercentFemale'] = pd.to_numeric(df_merged['AVG_PercentFemale'], errors='coerce')\n# df_merged['AVG_PercentMale'] = pd.to_numeric(df_merged['AVG_PercentMale'], errors='coerce')\n# df_merged['Continent_Sum_Female'] = pd.to_numeric(df_merged['Continent_Sum_Female'], errors='coerce')\n# df_merged['Continent_Sum_Male'] = pd.to_numeric(df_merged['Continent_Sum_Male'], errors='coerce')\n\n# # round the value\n# df_merged['AVG_PercentFemale'] = df_merged['AVG_PercentFemale'].round(2)\n# df_merged['AVG_PercentMale'] = df_merged['AVG_PercentMale'].round(2)\n# df_merged['Continent_Sum_Female'] = df_merged['Continent_Sum_Female'].round(2)\n# df_merged['Continent_Sum_Male'] = df_merged['Continent_Sum_Male'].round(2)\n\n\ndf_merged\n\n\n\n\n\n\n\n\n\nArea\nRegion\nAVG_PercentFemale\nAVG_PercentMale\nContinent_Sum_Female\nContinent_Sum_Male\n\n\n\n\n0\nAlbania\nEurope\n73\n57\n520\n492\n\n\n1\nAlgeria\nAfrica\n67\n62\n6061\n5860\n\n\n2\nAndorra\nEurope\n0\n0\n520\n492\n\n\n3\nAngola\nAfrica\n139\n127\n6061\n5860\n\n\n4\nAustria\nEurope\n8\n8\n520\n492\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n89\nUkraine\nEurope\n18\n16\n520\n492\n\n\n90\nUnited Kingdom of Great Britain and Northern I...\nEurope\n11\n9\n520\n492\n\n\n91\nUnited Republic of Tanzania\nAfrica\n177\n167\n6061\n5860\n\n\n92\nZambia\nAfrica\n189\n189\n6061\n5860\n\n\n93\nZimbabwe\nAfrica\n243\n225\n6061\n5860\n\n\n\n\n94 rows × 6 columns\n\n\n\n\n\n# change the dataframe to dictionary\ndf2 = df_merged.groupby('Region')\n# initialize the dictionary\ndata = []\n\n# iterate over each group\nfor region, group in df2:\n    # print(group)\n    children = []\n    # iterate over each row in the group\n    for _, row in group.iterrows():\n        children.append({\n            'id': row['Area'],\n            'datum': {'AVG_PercentFemale': row['AVG_PercentFemale']}\n        })\n    # append region and its children to the data dictionary\n    data.append({'id': region, 'datum': group['AVG_PercentFemale'].sum(), 'children': children})\n\npprint.pp(data)\n\n[{'id': 'Africa',\n  'datum': 6042,\n  'children': [{'id': 'Algeria', 'datum': {'AVG_PercentFemale': 67}},\n               {'id': 'Angola', 'datum': {'AVG_PercentFemale': 139}},\n               {'id': 'Benin', 'datum': {'AVG_PercentFemale': 97}},\n               {'id': 'Botswana', 'datum': {'AVG_PercentFemale': 179}},\n               {'id': 'Burkina Faso', 'datum': {'AVG_PercentFemale': 93}},\n               {'id': 'Burundi', 'datum': {'AVG_PercentFemale': 0}},\n               {'id': 'Cabo Verde', 'datum': {'AVG_PercentFemale': 38}},\n               {'id': 'Cameroon', 'datum': {'AVG_PercentFemale': 178}},\n               {'id': 'Central African Republic',\n                'datum': {'AVG_PercentFemale': 185}},\n               {'id': 'Chad', 'datum': {'AVG_PercentFemale': 0}},\n               {'id': 'Comoros', 'datum': {'AVG_PercentFemale': 56}},\n               {'id': 'Congo', 'datum': {'AVG_PercentFemale': 352}},\n               {'id': \"Cote d'Ivoire\", 'datum': {'AVG_PercentFemale': 60}},\n               {'id': 'Democratic Republic of the Congo',\n                'datum': {'AVG_PercentFemale': 114}},\n               {'id': 'Djibouti', 'datum': {'AVG_PercentFemale': 30}},\n               {'id': 'Egypt', 'datum': {'AVG_PercentFemale': 61}},\n               {'id': 'Equatorial Guinea', 'datum': {'AVG_PercentFemale': 0}},\n               {'id': 'Eritrea', 'datum': {'AVG_PercentFemale': 0}},\n               {'id': 'Eswatini', 'datum': {'AVG_PercentFemale': 34}},\n               {'id': 'Ethiopia', 'datum': {'AVG_PercentFemale': 116}},\n               {'id': 'Gabon', 'datum': {'AVG_PercentFemale': 0}},\n               {'id': 'Gambia', 'datum': {'AVG_PercentFemale': 147}},\n               {'id': 'Ghana', 'datum': {'AVG_PercentFemale': 42}},\n               {'id': 'Guinea', 'datum': {'AVG_PercentFemale': 339}},\n               {'id': 'Guinea-Bissau', 'datum': {'AVG_PercentFemale': 103}},\n               {'id': 'Kenya', 'datum': {'AVG_PercentFemale': 170}},\n               {'id': 'Lesotho', 'datum': {'AVG_PercentFemale': 118}},\n               {'id': 'Liberia', 'datum': {'AVG_PercentFemale': 237}},\n               {'id': 'Libya', 'datum': {'AVG_PercentFemale': 142}},\n               {'id': 'Madagascar', 'datum': {'AVG_PercentFemale': 46}},\n               {'id': 'Malawi', 'datum': {'AVG_PercentFemale': 362}},\n               {'id': 'Mali', 'datum': {'AVG_PercentFemale': 0}},\n               {'id': 'Mauritania', 'datum': {'AVG_PercentFemale': 44}},\n               {'id': 'Mauritius', 'datum': {'AVG_PercentFemale': 60}},\n               {'id': 'Morocco', 'datum': {'AVG_PercentFemale': 0}},\n               {'id': 'Mozambique', 'datum': {'AVG_PercentFemale': 210}},\n               {'id': 'Namibia', 'datum': {'AVG_PercentFemale': 225}},\n               {'id': 'Niger', 'datum': {'AVG_PercentFemale': 71}},\n               {'id': 'Nigeria', 'datum': {'AVG_PercentFemale': 107}},\n               {'id': 'Rwanda', 'datum': {'AVG_PercentFemale': 0}},\n               {'id': 'Sao Tome and Principe',\n                'datum': {'AVG_PercentFemale': 28}},\n               {'id': 'Senegal', 'datum': {'AVG_PercentFemale': 58}},\n               {'id': 'Seychelles', 'datum': {'AVG_PercentFemale': 12}},\n               {'id': 'Sierra Leone', 'datum': {'AVG_PercentFemale': 223}},\n               {'id': 'Somalia', 'datum': {'AVG_PercentFemale': 85}},\n               {'id': 'South Africa', 'datum': {'AVG_PercentFemale': 34}},\n               {'id': 'South Sudan', 'datum': {'AVG_PercentFemale': 317}},\n               {'id': 'Sudan', 'datum': {'AVG_PercentFemale': 112}},\n               {'id': 'Togo', 'datum': {'AVG_PercentFemale': 108}},\n               {'id': 'Tunisia', 'datum': {'AVG_PercentFemale': 74}},\n               {'id': 'Uganda', 'datum': {'AVG_PercentFemale': 160}},\n               {'id': 'United Republic of Tanzania',\n                'datum': {'AVG_PercentFemale': 177}},\n               {'id': 'Zambia', 'datum': {'AVG_PercentFemale': 189}},\n               {'id': 'Zimbabwe', 'datum': {'AVG_PercentFemale': 243}}]},\n {'id': 'Europe',\n  'datum': 503,\n  'children': [{'id': 'Albania', 'datum': {'AVG_PercentFemale': 73}},\n               {'id': 'Andorra', 'datum': {'AVG_PercentFemale': 0}},\n               {'id': 'Austria', 'datum': {'AVG_PercentFemale': 8}},\n               {'id': 'Belarus', 'datum': {'AVG_PercentFemale': 0}},\n               {'id': 'Belgium', 'datum': {'AVG_PercentFemale': 3}},\n               {'id': 'Bosnia and Herzegovina',\n                'datum': {'AVG_PercentFemale': 13}},\n               {'id': 'Bulgaria', 'datum': {'AVG_PercentFemale': 18}},\n               {'id': 'Croatia', 'datum': {'AVG_PercentFemale': 9}},\n               {'id': 'Czechia', 'datum': {'AVG_PercentFemale': 5}},\n               {'id': 'Denmark', 'datum': {'AVG_PercentFemale': 10}},\n               {'id': 'Estonia', 'datum': {'AVG_PercentFemale': 5}},\n               {'id': 'Finland', 'datum': {'AVG_PercentFemale': 17}},\n               {'id': 'France', 'datum': {'AVG_PercentFemale': 4}},\n               {'id': 'Germany', 'datum': {'AVG_PercentFemale': 5}},\n               {'id': 'Greece', 'datum': {'AVG_PercentFemale': 16}},\n               {'id': 'Hungary', 'datum': {'AVG_PercentFemale': 11}},\n               {'id': 'Iceland', 'datum': {'AVG_PercentFemale': 10}},\n               {'id': 'Ireland', 'datum': {'AVG_PercentFemale': 17}},\n               {'id': 'Italy', 'datum': {'AVG_PercentFemale': 5}},\n               {'id': 'Latvia', 'datum': {'AVG_PercentFemale': 4}},\n               {'id': 'Lithuania', 'datum': {'AVG_PercentFemale': 12}},\n               {'id': 'Luxembourg', 'datum': {'AVG_PercentFemale': 6}},\n               {'id': 'Malta', 'datum': {'AVG_PercentFemale': 11}},\n               {'id': 'Montenegro', 'datum': {'AVG_PercentFemale': 18}},\n               {'id': 'Netherlands (Kingdom of the)',\n                'datum': {'AVG_PercentFemale': 11}},\n               {'id': 'North Macedonia', 'datum': {'AVG_PercentFemale': 32}},\n               {'id': 'Norway', 'datum': {'AVG_PercentFemale': 7}},\n               {'id': 'Poland', 'datum': {'AVG_PercentFemale': 6}},\n               {'id': 'Portugal', 'datum': {'AVG_PercentFemale': 24}},\n               {'id': 'Republic of Moldova',\n                'datum': {'AVG_PercentFemale': 26}},\n               {'id': 'Romania', 'datum': {'AVG_PercentFemale': 33}},\n               {'id': 'Russian Federation', 'datum': {'AVG_PercentFemale': 2}},\n               {'id': 'Serbia', 'datum': {'AVG_PercentFemale': 19}},\n               {'id': 'Slovakia', 'datum': {'AVG_PercentFemale': 9}},\n               {'id': 'Slovenia', 'datum': {'AVG_PercentFemale': 4}},\n               {'id': 'Spain', 'datum': {'AVG_PercentFemale': 12}},\n               {'id': 'Sweden', 'datum': {'AVG_PercentFemale': 6}},\n               {'id': 'Switzerland', 'datum': {'AVG_PercentFemale': 3}},\n               {'id': 'Ukraine', 'datum': {'AVG_PercentFemale': 18}},\n               {'id': 'United Kingdom of Great Britain and Northern Ireland',\n                'datum': {'AVG_PercentFemale': 11}}]}]\n\n\n\ncircles = circlify.circlify(\n    data,\n    show_enclosure=False,\n    target_enclosure=circlify.Circle(x=0, y=0, r=1)\n)\n\nTypeError: unsupported operand type(s) for +: 'dict' and 'int'\n\n\n\n# create just a figure and only one subplot\nfig, ax = plt.subplots(figsize=(14, 14))\n\n# title\nax.set_title('Repartition of the world population')\n\n# remove axes\nax.axis('off')\n\n# find axis boundaries\nlim = max(\n    max(\n        circle['x'] + circle['r'],\n        circle['y'] + circle['r'],\n    )\n    for circle in circles\n)\nplt.xlim(-lim, lim)\nplt.ylim(-lim, lim)\n\n# print circle the highest level (continents):\nfor circle in circles:\n    if circle['level'] != 2:\n        continue\n    x, y, r = circle['x'], circle['y'], circle['r']\n    ax.add_patch(plt.Circle((x, y), r, alpha=0.5,\n                 linewidth=2, color=\"lightblue\"))\n\n# print circle and labels for the highest level:\nfor circle in circles:\n    if circle['level'] != 3:\n        continue\n    x, y, r = circle['x'], circle['y'], circle['r']\n    label = circle['ex'][\"id\"]\n    ax.add_patch(plt.Circle((x, y), r, alpha=0.5,\n                 linewidth=2, color=\"#69b3a2\"))\n    plt.annotate(label, (x, y), ha='center', color=\"white\")\n\n# print labels for the continents\nfor circle in circles:\n    if circle['level'] != 2:\n        continue\n    x, y, _ = circle['x'], circle['y'], circle['r']\n    label = circle['ex'][\"id\"]\n    plt.annotate(label, (x, y), va='center', ha='center', bbox=dict(\n        facecolor='white', edgecolor='black', boxstyle='round', pad=.5))\n\nTypeError: unsupported operand type(s) for +: 'dict' and 'int'\n\n\nColors:\nEurope: #140D4F Africa: #598B2C\n#11270B #42CAFD #FFA400 #F5EDF0 #1C0B19 #66B3BA #92140C\n\ncolors = ['#11270B', '#42CAFD', '#FFA400', '#F5EDF0', '#1C0B19', '#66B3BA', '#92140C']\n\ndata_dict = {\n    'Area': another_df['Area'].tolist(),\n    'AVG_PercentFemale': another_df['AVG_PercentFemale'].tolist(),\n    'AVG_PercentMale': another_df['AVG_PercentMale'].tolist(),\n    'color': colors[:len(another_df)]  # Selecting colors based on the length of the DataFrame\n}\n\n\n# browser_market_share = {\n#     'browsers': ['firefox', 'chrome', 'safari', 'edge', 'ie', 'opera'],\n#     'market_share': [8.61, 69.55, 8.36, 4.12, 2.76, 2.43],\n#     'color': ['#5A69AF', '#579E65', '#F9C784', '#FC944A', '#F24C00']\n# }\n\n# colors = {'color': ['#11270B', '#42CAFD', '#FFA400', '#F5EDF0', '#1C0B19', '#66B3BA', '#92140C']}\n\n\nclass BubbleChart:\n    def __init__(self, area, bubble_spacing=0):\n        \"\"\"\n        Setup for bubble collapse.\n\n        Parameters\n        ----------\n        area : array-like\n            Area of the bubbles.\n        bubble_spacing : float, default: 0\n            Minimal spacing between bubbles after collapsing.\n\n        Notes\n        -----\n        If \"area\" is sorted, the results might look weird.\n        \"\"\"\n        area = np.asarray(area)\n        r = np.sqrt(area / np.pi)\n\n        self.bubble_spacing = bubble_spacing\n        self.bubbles = np.ones((len(area), 4))\n        self.bubbles[:, 2] = r\n        self.bubbles[:, 3] = area\n        self.maxstep = 2 * self.bubbles[:, 2].max() + self.bubble_spacing\n        self.step_dist = self.maxstep / 2\n\n        # calculate initial grid layout for bubbles\n        length = np.ceil(np.sqrt(len(self.bubbles)))\n        grid = np.arange(length) * self.maxstep\n        gx, gy = np.meshgrid(grid, grid)\n        self.bubbles[:, 0] = gx.flatten()[:len(self.bubbles)]\n        self.bubbles[:, 1] = gy.flatten()[:len(self.bubbles)]\n\n        self.com = self.center_of_mass()\n\n    def center_of_mass(self):\n        return np.average(\n            self.bubbles[:, :2], axis=0, weights=self.bubbles[:, 3]\n        )\n\n    def center_distance(self, bubble, bubbles):\n        return np.hypot(bubble[0] - bubbles[:, 0],\n                        bubble[1] - bubbles[:, 1])\n\n    def outline_distance(self, bubble, bubbles):\n        center_distance = self.center_distance(bubble, bubbles)\n        return center_distance - bubble[2] - \\\n            bubbles[:, 2] - self.bubble_spacing\n\n    def check_collisions(self, bubble, bubbles):\n        distance = self.outline_distance(bubble, bubbles)\n        return len(distance[distance &lt; 0])\n\n    def collides_with(self, bubble, bubbles):\n        distance = self.outline_distance(bubble, bubbles)\n        return np.argmin(distance, keepdims=True)\n\n    def collapse(self, n_iterations=50):\n        \"\"\"\n        Move bubbles to the center of mass.\n\n        Parameters\n        ----------\n        n_iterations : int, default: 50\n            Number of moves to perform.\n        \"\"\"\n        for _i in range(n_iterations):\n            moves = 0\n            for i in range(len(self.bubbles)):\n                rest_bub = np.delete(self.bubbles, i, 0)\n                # try to move directly towards the center of mass\n                # direction vector from bubble to the center of mass\n                dir_vec = self.com - self.bubbles[i, :2]\n\n                # shorten direction vector to have length of 1\n                dir_vec = dir_vec / np.sqrt(dir_vec.dot(dir_vec))\n\n                # calculate new bubble position\n                new_point = self.bubbles[i, :2] + dir_vec * self.step_dist\n                new_bubble = np.append(new_point, self.bubbles[i, 2:4])\n\n                # check whether new bubble collides with other bubbles\n                if not self.check_collisions(new_bubble, rest_bub):\n                    self.bubbles[i, :] = new_bubble\n                    self.com = self.center_of_mass()\n                    moves += 1\n                else:\n                    # try to move around a bubble that you collide with\n                    # find colliding bubble\n                    for colliding in self.collides_with(new_bubble, rest_bub):\n                        # calculate direction vector\n                        dir_vec = rest_bub[colliding, :2] - self.bubbles[i, :2]\n                        dir_vec = dir_vec / np.sqrt(dir_vec.dot(dir_vec))\n                        # calculate orthogonal vector\n                        orth = np.array([dir_vec[1], -dir_vec[0]])\n                        # test which direction to go\n                        new_point1 = (self.bubbles[i, :2] + orth *\n                                      self.step_dist)\n                        new_point2 = (self.bubbles[i, :2] - orth *\n                                      self.step_dist)\n                        dist1 = self.center_distance(\n                            self.com, np.array([new_point1]))\n                        dist2 = self.center_distance(\n                            self.com, np.array([new_point2]))\n                        new_point = new_point1 if dist1 &lt; dist2 else new_point2\n                        new_bubble = np.append(new_point, self.bubbles[i, 2:4])\n                        if not self.check_collisions(new_bubble, rest_bub):\n                            self.bubbles[i, :] = new_bubble\n                            self.com = self.center_of_mass()\n\n            if moves / len(self.bubbles) &lt; 0.1:\n                self.step_dist = self.step_dist / 2\n\n    def plot(self, ax, labels, colors):\n        \"\"\"\n        Draw the bubble plot.\n\n        Parameters\n        ----------\n        ax : matplotlib.axes.Axes\n        labels : list\n            Labels of the bubbles.\n        colors : list\n            Colors of the bubbles.\n        \"\"\"\n        for i in range(len(self.bubbles)):\n            circ = plt.Circle(\n                self.bubbles[i, :2], self.bubbles[i, 2], color=colors[i])\n            ax.add_patch(circ)\n            ax.text(*self.bubbles[i, :2], labels[i],\n                    horizontalalignment='center', verticalalignment='center')\n\n\nbubble_chart = BubbleChart(area=data_dict['AVG_PercentFemale'],\n                           bubble_spacing=0.1)\n\nbubble_chart.collapse()\n\nfig, ax = plt.subplots(subplot_kw=dict(aspect=\"equal\"))\nbubble_chart.plot(ax, data_dict['Area'], colors)\nax.axis(\"off\")\nax.relim()\nax.autoscale_view()\nax.set_title('Food Insecurity')\n\nplt.show()\n\nIndexError: list index out of range\n\n\nError in callback &lt;function flush_figures at 0x336e300e0&gt; (for post_execute), with arguments args (),kwargs {}:\n\n\nKeyboardInterrupt:"
  },
  {
    "objectID": "main.html",
    "href": "main.html",
    "title": "Climate change and food insecurity",
    "section": "",
    "text": "# import necessary variables\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport geopandas as gpd\nimport warnings\nwarnings.filterwarnings('ignore')"
  },
  {
    "objectID": "main.html#data-visualization",
    "href": "main.html#data-visualization",
    "title": "Climate change and food insecurity",
    "section": "Data Visualization",
    "text": "Data Visualization\nPer Capita Food Supply Variability (kcal/cap/day)\n\nFirst Plot\n\n# choropleth\nfig = px.choropleth(df1, locations = 'country',\n                    locationmode='country names',\n                    color=\"value\",\n                    hover_name = 'country',\n                    title = 'Per Capita Food Supply Variability (kcal/cap/day)',\n                    color_continuous_scale=px.colors.sequential.Plasma\n                    )\nfig.update_layout(width=1000, height=800)\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# time series data\ndf2 = df[['country', 'year', 'value']]\n# convert the value column to float\ndf2['value'] = pd.to_numeric(df2['value'], errors='coerce')\n# group the data by country and year\ndf2 = df2.groupby(['country', 'year']).mean().reset_index()\ndf2 = df2.pivot(index='country', columns='year', values='value')\ndf2.head()\n\n\n\n\n\n\n\n\nyear\n2000\n2000-2002\n2001\n2001-2003\n2002\n2002-2004\n2003\n2003-2005\n2004\n2004-2006\n...\n2017\n2017-2019\n2018\n2018-2020\n2019\n2019-2021\n2020\n2020-2022\n2021\n2022\n\n\ncountry\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfghanistan\n223.700588\n59.38\n224.575882\n62.94\n270.487368\n54.16\n271.884737\n52.62\n244.503810\n51.23\n...\n359.908235\n42.872727\n307.894000\n42.986364\n360.781765\n42.558824\n399.280000\n35.960000\n488.925455\n426.945556\n\n\nAlbania\n481.722273\n52.45\n530.579524\n52.79\n520.983636\n53.08\n539.859091\n52.88\n560.862727\n52.99\n...\n928.068947\n30.909091\n1065.682941\n31.566667\n1084.625882\n18.375000\n1200.874667\n18.150000\n2105.637778\n631.747143\n\n\nAlgeria\n553.792500\n45.26\n640.562857\n45.01\n577.152500\n44.92\n653.721364\n44.51\n667.308636\n44.67\n...\n774.687143\n30.085000\n771.723810\n29.955000\n672.041667\n18.253333\n848.272222\n18.907692\n1380.306364\n456.571111\n\n\nAmerican Samoa\n61.052500\nNaN\n61.350000\nNaN\n61.675000\nNaN\n62.000000\nNaN\n50.026000\nNaN\n...\n51.228000\nNaN\n51.228000\nNaN\n51.218000\nNaN\n51.218000\nNaN\n2.035000\n3.020000\n\n\nAndorra\n38.786667\nNaN\n44.412500\nNaN\n40.442222\n0.30\n41.285556\n0.30\n42.087778\n0.30\n...\n51.605000\n0.300000\n51.642500\n0.300000\n51.715000\n0.300000\n57.377143\nNaN\n2.325000\n3.020000\n\n\n\n\n5 rows × 44 columns\n\n\n\n\n\nabsolute_change = df2['2021'] - df2['2000']\nrelative_change = ((df2['2021'] - df2['2000']) / df2['2000']) * 100\n\n\ndf2 = pd.DataFrame({\n    'country': df2.index,\n    '2000': df2['2000'],\n    '2021': df2['2021'],\n    'absolute_change': absolute_change,\n    'relative_change': relative_change\n})\n\ndf2['absolute_change'] = df2['absolute_change'].round(2)\ndf2['relative_change']=df2['relative_change'].apply(lambda x: int(x))\ndf2['relative_change']= df2['relative_change'].astype(str) + '%'\n\n\ndf2.drop(columns=['country'], inplace=True)\ndf2.reset_index(inplace=True)\ndf2.head()\n\n\n\n\n\n\n\n\n\ncountry\n2000\n2021\nabsolute_change\nrelative_change\n\n\n\n\n0\nAfghanistan\n223.700588\n488.925455\n265.22\n118%\n\n\n1\nAlbania\n481.722273\n2105.637778\n1623.92\n337%\n\n\n2\nAlgeria\n553.792500\n1380.306364\n826.51\n149%\n\n\n3\nAmerican Samoa\n61.052500\n2.035000\n-59.02\n-96%\n\n\n4\nAndorra\n38.786667\n2.325000\n-36.46\n-94%\n\n\n\n\n\n\n\n\n\n\nSecond Plot\n\nfig = px.bar(df2, x='country', y=['2000', '2021'],\n             title='Comparison of Values in 2000 and 2021',\n             labels={'value': 'Value', 'variable': 'Year'},\n             hover_data={'absolute_change': True, 'relative_change': True},\n             barmode='group')\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nNumber of children under 5 years of age who are stunted (modeled estimates) (million)\n\n# check the item\nvalue_to_check = 'Number of children under 5 years of age who are stunted (modeled estimates) (million)'\nif value_to_check in df['item'].values:\n    print(\"Exists\")\nelse:\n    print(\"Does not exist\")\n\nExists\n\n\n\n# Number of children under 5 years of age who are stunted (modeled estimates) (million) \ndf3 = df[df['item'] == 'Number of children under 5 years of age who are stunted (modeled estimates) (million)']\n# convert the value column to float\ndf3['value'] = pd.to_numeric(df3['value'], errors='coerce')\n\n# group by country and item\ndf3 = df3.groupby(['country', 'item'], as_index=False)['value'].sum()\n\n# round the value column\n# df3['value'] = df3['value'].round(2)\ndf3.head()\n\n\n\n\n\n\n\n\n\ncountry\nitem\nvalue\n\n\n\n\n0\nAfghanistan\nNumber of children under 5 years of age who ar...\n54.3\n\n\n1\nAlbania\nNumber of children under 5 years of age who ar...\n0.7\n\n\n2\nAlgeria\nNumber of children under 5 years of age who ar...\n11.9\n\n\n3\nAngola\nNumber of children under 5 years of age who ar...\n38.8\n\n\n4\nArgentina\nNumber of children under 5 years of age who ar...\n6.9\n\n\n\n\n\n\n\n\n\n# normalize the data\n\n\n# choropleth\nfig = px.choropleth(df3, locations = 'country',\n                    locationmode='country names',\n                    color=\"value\",\n                    hover_name = 'country',\n                    title = 'Number of children under 5 years of age who are stunted (modeled estimates) (million)',\n                    color_continuous_scale=px.colors.sequential.Plasma\n                    )\nfig.update_layout(width=1000, height=800)\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# import highchart classes\nfrom highcharts_core.chart import Chart\nfrom highcharts_core.global_options.shared_options import SharedOptions\nfrom highcharts_core.options import HighchartsOptions\nfrom highcharts_core.options.plot_options.bar import BarOptions\nfrom highcharts_core.options.series.bar import BarSeries"
  },
  {
    "objectID": "ObesityMalnourishmentVizs.html",
    "href": "ObesityMalnourishmentVizs.html",
    "title": "Final Project Part 2 Visual",
    "section": "",
    "text": "library(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(maps)\n\n\nobesity_data &lt;- subset(read.csv(\"data/CleanedData/obesityadults.csv\"), select=-1)\ncolnames(obesity_data)[colnames(obesity_data) == \"Area\"] &lt;- \"Country\"\ncolnames(obesity_data)[colnames(obesity_data) == \"Region\"] &lt;- \"Continent\"\ncolnames(obesity_data)[colnames(obesity_data) == \"Percent\"] &lt;- \"Obesity_Percent\"\n\nmalnour_data &lt;- subset(read.csv(\"data/CleanedData/undernourishment.csv\"), select=-1)\ncolnames(malnour_data)[colnames(malnour_data) == \"Area\"] &lt;- \"Country\"\ncolnames(malnour_data)[colnames(malnour_data) == \"Region\"] &lt;- \"Continent\"\ncolnames(malnour_data)[colnames(malnour_data) == \"AVG_Percent\"] &lt;- \"Malnourished_Percent\"\nmalnour_data$Start_Year &lt;- as.integer(substr(malnour_data$YearPeriod, 2, 5))\nmalnour_data$End_Year &lt;- as.integer(substr(malnour_data$YearPeriod, 6, 9))\nmalnour_data &lt;- malnour_data[, -which(names(malnour_data) == \"YearPeriod\")]\n\n\ndf &lt;- merge(obesity_data, malnour_data, by.x = c(\"Country\", \"Continent\", \"Year\"), by.y = c(\"Country\", \"Continent\", \"Start_Year\"))\ndf &lt;- df[, -which(names(df) %in% c(\"End_Year\"))]\n\n\naverages &lt;- df %&gt;%\n  group_by(Year, Continent) %&gt;%\n  summarise(`Avg Obesity %` = round(mean(Obesity_Percent, na.rm = TRUE), 2),\n    `Avg Malnourished %` = round(mean(as.numeric(Malnourished_Percent), na.rm = TRUE), 2), .groups = \"drop\")\n\naverages &lt;- averages %&gt;%\n  group_by(Continent) %&gt;%\n  mutate(Obesity_Perc_Diff = ifelse(Continent == lag(Continent), round(`Avg Obesity %` - lag(`Avg Obesity %`), 2), \"\"),\n    Malnourished_Perc_Diff = ifelse(Continent == lag(Continent), round(`Avg Malnourished %` - lag(`Avg Malnourished %`), 2), \"\"))\n\n\ncolors &lt;- c(\"Europe\" = \"#140D4F\", \"Africa\" = \"#598B2C\")\n\n#malnourished plot\nsubplot_malnourished &lt;- averages %&gt;%\n  plot_ly(x = ~Year, y = ~`Avg Malnourished %`, color = ~Continent, colors=colors, type = 'scatter', mode = 'lines+markers', showlegend=TRUE, text=~Malnourished_Perc_Diff, hovertemplate = paste(\"%{y:.2f}% (%{text}% change)\", \"&lt;extra&gt;&lt;/extra&gt;\"), marker = list(size = 8)) %&gt;%\n  layout(xaxis = list(title = \"&lt;b&gt;Year&lt;b&gt;\", range=c(1999,2017), tickvals = seq(2000, 2016, by = 2)),\n         yaxis = list(title = \"&lt;b&gt;Avg. Malnourishment %&lt;b&gt;\", tickvals = seq(0, max(averages$`Avg Malnourished %`) + 1, by = 2), ticktext = paste0(seq(0, max(averages$`Avg Malnourished %`) + 1, by = 2), \"%\")), \n         hovermode = \"x unified\", \n         paper_bgcolor = \"#FCFFFC\",\n         font=list(family=\"Palatino\"),\n         legend=list(x=1, y=0.5, borderwidth=1, bordercolor='black')) \n\n#obesity plot\nsubplot_obesity &lt;- averages %&gt;%\n  plot_ly(x = ~Year, y = ~`Avg Obesity %`, color = ~Continent, colors=colors, type = 'scatter', mode = 'lines+markers', showlegend=FALSE, text=~Obesity_Perc_Diff, hovertemplate = paste(\"%{y:.2f}% (%{text}% increase)\", \"&lt;extra&gt;&lt;/extra&gt;\"), marker = list(size = 8)) %&gt;%\n  layout(title = \"&lt;b&gt;Average Health Issue Rate in Europe & Africa (2000-2016)&lt;b&gt;\",\n         xaxis = list(title = \"&lt;b&gt;Year&lt;b&gt;\", tickvals = seq(2000, 2016, by = 2)),\n         yaxis = list(title = \"&lt;b&gt;Avg. Obesity %&lt;b&gt;\", tickvals = seq(0, max(averages$`Avg Malnourished %`) + 1, by = 2), ticktext = paste0(seq(0, max(averages$`Avg Malnourished %`) + 1, by = 2), \"%\")), \n         hovermode = \"x unified\", \n         paper_bgcolor = \"#FCFFFC\",\n         font=list(family=\"Palatino\"),\n         legend=list(x=1, y=0.5, borderwidth=1, bordercolor='black'))\n\nline_plot &lt;- subplot(subplot_malnourished, subplot_obesity, margin=0.05,\n                     nrows = 1, titleY = TRUE, titleX = TRUE)\n\nline_plot\n\n\n\n\n\n\n# subset\nafrica_data &lt;- averages %&gt;% filter(Continent == \"Africa\")\neurope_data &lt;- averages %&gt;% filter(Continent == \"Europe\")\n\n# malnourishment plots\nmalnourished_africa &lt;- plot_ly(africa_data, x = ~Year, y = ~`Avg Malnourished %`, type = 'bar', color = ~Continent, colors = colors, showlegend = FALSE, text=~Malnourished_Perc_Diff, hovertemplate = paste(\"%{y:.2f}% &lt;br&gt; (%{text:.2f}% change)\")) %&gt;%\n  layout(title = \"&lt;b&gt;Average Malnourishment Rate in Europe & Africa (2000-2016)&lt;/b&gt;\",\n         xaxis = list(title = \"&lt;b&gt;Year&lt;b&gt;\", range=c(1999.5,2016.5), tickvals = seq(2000, 2016, by = 2), color = \"#1c0b19\"),\n         yaxis = list(title = \"&lt;b&gt;Avg Malnourishment %&lt;b&gt;\", \n                      range = c(0,28),\n                      tickvals = seq(0, 25, by = 5), \n                      ticktext = paste0(seq(0, 25, by = 5), \"%\"),\n                      color = \"#1c0b19\",\n                      showgrid = TRUE, gridcolor = \"#F0F8FF\"), \n         hovermode = \"x unified\", \n         paper_bgcolor = \"#FCFFFC\",\n         font = list(family = \"Palatino\", color = \"#1c0b19\"),\n         legend=list(x=1.05, y=0.5, borderwidth=1, bordercolor='#11270b', font=list(color=\"#1c0b19\")))\n\nmalnourished_europe &lt;- plot_ly(europe_data, x = ~Year, y = ~`Avg Malnourished %`, type = 'bar', color = ~Continent, colors = colors, showlegend = FALSE, text=~Malnourished_Perc_Diff, hovertemplate = paste(\"%{y:.2f}% &lt;br&gt; (%{text:.2f}% change)\")) %&gt;%\n  layout(xaxis = list(title = \"&lt;b&gt;Year&lt;b&gt;\", range=c(1999.5,2016.5), tickvals = seq(2000, 2016, by = 2), color = \"#1c0b19\"),\n         yaxis = list(title = \"&lt;b&gt;Avg Malnourishment %&lt;b&gt;\", \n                      range = c(0,28), \n                      tickvals = seq(0, 25, by = 5), \n                      ticktext = paste0(seq(0, 25, by = 5), \"%\"),\n                      color = \"#1c0b19\",\n                      showgrid = TRUE, gridcolor = \"#F0F8FF\"), \n         hovermode = \"x unified\", \n         paper_bgcolor = \"#FCFFFC\",\n         font = list(family = \"Palatino\", color = \"#1c0b19\"),\n         legend=list(x=1.05, y=0.5, borderwidth=1, bordercolor='#11270b', font=list(color=\"#1c0b19\")))\n\n# create subplot for malnourishment\nsubplot_barcharts &lt;- subplot(\n  malnourished_europe, malnourished_africa,\n  nrows = 2, margin = 0.05\n) \n\nsubplot_barcharts\n\n\n\n\n# obesity plots\nobesity_africa &lt;- plot_ly(africa_data, x = ~Year, y = ~`Avg Obesity %`, type = 'bar', color = ~Continent, colors = colors, showlegend = FALSE, text=~Obesity_Perc_Diff, hovertemplate = paste(\"%{y:.2f}% &lt;br&gt; (%{text:.2f}% increase)\")) %&gt;%\n  layout(title = \"&lt;b&gt;Average Obesity Rate in Europe & Africa (2000-2016)&lt;/b&gt;\",\n         xaxis = list(title = \"&lt;b&gt;Year&lt;b&gt;\", tickvals = seq(2000, 2016, by = 2)),\n         yaxis = list(title = \"&lt;b&gt;Avg Obesity %&lt;b&gt;\", \n                      range = c(0,28), \n                      tickvals = seq(0, 25, by = 5), \n                      ticktext = paste0(seq(0, 25, by = 5), \"%\")), \n         hovermode = \"x unified\", \n         paper_bgcolor = \"#FCFFFC\",\n         font = list(family = \"Palatino\", color = \"#1c0b19\"),\n         legend=list(x=1.05, y=0.5, borderwidth=1, bordercolor='black'))\n\nobesity_europe &lt;- plot_ly(europe_data, x = ~Year, y = ~`Avg Obesity %`, type = 'bar', color = ~Continent, colors = colors, showlegend = FALSE, text=~Obesity_Perc_Diff, hovertemplate = paste(\"%{y:.2f}% &lt;br&gt; (%{text:.2f}% increase)\")) %&gt;%\n  layout(xaxis = list(title = \"&lt;b&gt;Year&lt;b&gt;\", tickvals = seq(2000, 2016, by = 2), color=\"#1c0b19\"),\n         yaxis = list(title = \"&lt;b&gt;Avg Obesity %&lt;b&gt;\", \n                      range = c(0,28), \n                      tickvals = seq(0, 25, by = 5), \n                      ticktext = paste0(seq(0, 25, by = 5), \"%\")), \n         hovermode = \"x unified\", \n         paper_bgcolor = \"#FCFFFC\",\n         font = list(family = \"Palatino\", color = \"#1c0b19\"),\n         legend=list(x=1.05, y=0.5, borderwidth=1, bordercolor='#11270b', font=list(color=\"#1c0b19\")))\n\n\n# create subplot for obesity\nsubplot_barcharts1 &lt;- subplot(\n  obesity_europe, obesity_africa,\n  nrows = 2, margin = 0.05\n)\nsubplot_barcharts1\n\n\n\n\n\n\nworld_map &lt;- map_data(\"world\")\nchoropleth &lt;- merge(world_map, df, by.x=\"region\", by.y=\"Country\", all.x=TRUE)\nchoropleth &lt;- choropleth[!is.na(choropleth$Year), ]\nchoropleth &lt;- subset(choropleth, Year &lt;= 2016)\nchoropleth &lt;- choropleth %&gt;% arrange(region, Year) %&gt;%\n  mutate(Malnourished_Percent = ifelse(Malnourished_Percent == \"&lt;2.5\", 2.5,  Malnourished_Percent)) %&gt;%\n  filter(Malnourished_Percent != \"\") %&gt;%\n  mutate(Malnourished_Percent = as.numeric(`Malnourished_Percent`))\n\nchoropleth &lt;- choropleth %&gt;%\n  group_by(region, Year) %&gt;%\n  summarise(Longitude = mean(long),\n            Latitude = mean(lat),\n            Continent = first(Continent),\n            `Obesity %` = first(Obesity_Percent),\n            `Malnourished %` = first(Malnourished_Percent),\n            Group = first(group), .groups=\"drop\") \n\n\ncountry_avgs &lt;- choropleth %&gt;%\n  group_by(region) %&gt;%\n  summarise(\n    Longitude = mean(Longitude),\n    Latitude = mean(Latitude),\n    Continent = first(Continent),\n    Avg_Obesity_Perc = round(mean(`Obesity %`, na.rm = TRUE), 2),\n    Avg_Malnour_Perc = round(mean(`Malnourished %`, na.rm = TRUE), 2),\n    .groups = \"drop\"\n  )\n\nhead(country_avgs)\n\n# A tibble: 6 × 6\n  region  Longitude Latitude Continent Avg_Obesity_Perc Avg_Malnour_Perc\n  &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;            &lt;dbl&gt;\n1 Albania     20.1      41.1 Europe               17.2              6.04\n2 Algeria      1.78     29.2 Africa               22.2              4.92\n3 Angola      17.4     -10.8 Africa                5.71            34.6 \n4 Austria     13.5      47.6 Europe               16.9              2.5 \n5 Belarus     28.1      53.5 Europe               21.6              2.6 \n6 Belgium      4.73     50.6 Europe               19.5              2.5 \n\n\n\naverage_stats &lt;- country_avgs %&gt;%\n  group_by(Continent) %&gt;%\n  summarize(`Avg Malnourishment %` = round(mean(Avg_Malnour_Perc),2),\n            `Avg Obesity %` = round(mean(Avg_Obesity_Perc),2))\n\naverage_stats\n\n# A tibble: 2 × 3\n  Continent `Avg Malnourishment %` `Avg Obesity %`\n  &lt;chr&gt;                      &lt;dbl&gt;           &lt;dbl&gt;\n1 Africa                     20.3              9.5\n2 Europe                      2.88            19.5\n\n\n\ncustom_palette &lt;- c(\"steelblue1\", \"royalblue3\", \"firebrick2\", \"firebrick4\")\n\neurope_subset &lt;- subset(country_avgs, Continent == \"Europe\")\n\n# obesity\neurope_ob &lt;- plot_ly(\n  data = europe_subset,\n  z = ~Avg_Obesity_Perc,\n  locations = ~region,\n  locationmode = \"country names\",\n  type = \"choropleth\",\n  color = ~Avg_Obesity_Perc,\n  colors = custom_palette,\n  marker = list(line = list(color = \"black\", width = 1)),\n  text=~region,\n  hovertemplate = paste(\"%{text}: %{z:.2f}%\", \"&lt;extra&gt;&lt;/extra&gt;\")\n) %&gt;%\ncolorbar(title = \"&lt;b&gt;Rate&lt;b&gt;\") %&gt;%\nlayout(\n  title = \"&lt;b&gt;Average Obesity Rate in Europe (2000-2020)&lt;b&gt;\",\n  geo = list(scope = \"europe\", projection = list(type = \"natural earth\"), showlakes = FALSE, showframe=TRUE,\n    showland = TRUE,\n    showcountries = TRUE,\n    showcoastlines = TRUE,\n    countrycolor = \"black\",\n    countrywidth = 1,\n    lonaxis = list(range = c(-20, 39)), \n    lataxis = list(range = c(32, 80)),  \n    resolution = 50, landcolor=\"aliceblue\"), \n  paper_bgcolor = \"aliceblue\", \n  font = list(family = \"Palatino\"), \n  legend=list(x=1.05, y=0.5, borderwidth=1, bordercolor='black', title=\"Obesity Rate\")\n)\n\n# malnourishment\neurope_mal &lt;- plot_ly(\n  data = europe_subset,\n  z = ~Avg_Malnour_Perc,\n  locations = ~region,\n  locationmode = \"country names\",\n  type = \"choropleth\",\n  color = ~Avg_Malnour_Perc,\n  colors = custom_palette,\n  marker = list(line = list(color = \"black\", width = 1)),\n  text=~region,\n  hovertemplate = paste(\"%{text}: %{z:.2f}%\", \"&lt;extra&gt;&lt;/extra&gt;\")\n) %&gt;%\ncolorbar(title = \"&lt;b&gt;Rate&lt;b&gt;\")%&gt;%\nlayout(\n  title = \"&lt;b&gt;Average Malnourishment Rate in Europe (2000-2020)&lt;b&gt;\",\n  geo = list(scope = \"world\", projection = list(type = \"natural earth\"), showlakes = FALSE,\n    showland = TRUE,\n    showcountries = TRUE,\n    showcoastlines = TRUE,\n    showframe = TRUE,\n    countrycolor = \"black\",\n    countrywidth = 1,\n    lonaxis = list(range = c(-20, 39)), \n    lataxis = list(range = c(32, 80)),  \n    resolution = 50, landcolor=\"aliceblue\"), \n  paper_bgcolor = \"aliceblue\", \n  font = list(family = \"Palatino\")\n)\n\neurope_ob\n\n\n\n\neurope_mal\n\n\n\n\n\n\nafrica_subset &lt;- subset(country_avgs, Continent == \"Africa\")\n\n# obesity\nafrica_ob &lt;- plot_ly(\n  data = africa_subset,\n  z = ~Avg_Obesity_Perc,\n  locations = ~region,\n  locationmode = \"country names\",\n  type = \"choropleth\",\n  color = ~Avg_Obesity_Perc,\n  colors = custom_palette,\n  marker = list(line = list(color = \"black\", width = 1)),\n  text=~region,\n  hovertemplate = paste(\"%{text}: %{z:.2f}%\", \"&lt;extra&gt;&lt;/extra&gt;\")\n) %&gt;%\ncolorbar(title = \"&lt;b&gt;Rat&lt;b&gt;e\") %&gt;%\nlayout(\n  title = \"&lt;b&gt;Average Obesity Rate in Africa (2000-2020)&lt;b&gt;\",\n  geo = list(scope = \"world\", projection = list(type = \"equirectangular\"), showlakes = FALSE,\n    showland = TRUE,\n    showcountries = TRUE,\n    showcoastlines = TRUE,\n    showframe = TRUE,\n    countrycolor = \"black\",\n    countrywidth = 1,\n    lonaxis = list(range = c(-20, 55)), \n    lataxis = list(range = c(-38, 40)),  \n    resolution = 50, landcolor=\"aliceblue\"), \n  paper_bgcolor = \"aliceblue\", \n  font = list(family = \"Palatino\"), \n  legend=list(x=1.05, y=0.5, borderwidth=1, bordercolor='black', title=\"Obesity Rate\")\n)\n\n# malnourishment\nafrica_mal &lt;- plot_ly(\n  data = africa_subset,\n  z = ~Avg_Malnour_Perc,\n  locations = ~region,\n  locationmode = \"country names\",\n  type = \"choropleth\",\n  color = ~Avg_Malnour_Perc,\n  colors = custom_palette,\n  marker = list(line = list(color = \"black\", width = 1)),\n  text=~region,\n  hovertemplate = paste(\"%{text}: %{z:.2f}%\", \"&lt;extra&gt;&lt;/extra&gt;\")\n) %&gt;%\ncolorbar(title = \"&lt;b&gt;Rate&lt;b&gt;\")%&gt;%\nlayout(\n  title = \"&lt;b&gt;Average Malnourishment Rate in Africa (2000-2020)&lt;b&gt;\",\n  geo = list(scope = \"world\", projection = list(type = \"equirectangular\"), showlakes = FALSE,\n    showland = TRUE,\n    showcountries = TRUE,\n    showcoastlines = TRUE,\n    showframe = TRUE,\n    countrycolor = \"black\",\n    countrywidth = 1,\n    lonaxis = list(range = c(-20, 55)), \n    lataxis = list(range = c(-38, 40)),  \n    resolution = 50, landcolor=\"aliceblue\"), paper_bgcolor = \"aliceblue\", font = list(family = \"Palatino\")\n)\n\nafrica_ob\n\n\n\n\nafrica_mal\n\n\n\n\n\n\nobesity_map &lt;- plot_ly(\n  data = country_avgs,\n  z = ~Avg_Obesity_Perc,\n  locations = ~region,\n  locationmode = \"country names\",\n  type = \"choropleth\",\n  color = ~Avg_Obesity_Perc,\n  colors = custom_palette,\n  marker = list(line = list(color = \"black\", width = 1)),\n  text=~region,\n  hovertemplate = paste(\"%{text}'s Obesity Rate = %{z:.2f}%\", \"&lt;extra&gt;&lt;/extra&gt;\")\n) %&gt;%\ncolorbar(title = \"&lt;b&gt;Rate&lt;b&gt;\") %&gt;%\nlayout(\n  title = \"&lt;b&gt;Average Obesity Rate (2000-2016)&lt;b&gt;\",\n  geo = list(scope = \"world\", projection = list(type = \"equirectangular\"), showlakes = FALSE,\n    showland = TRUE,\n    showcountries = TRUE,\n    showcoastlines = TRUE,\n    showframe = TRUE,\n    countrycolor = \"black\",\n    countrywidth = 0.5,\n    lonaxis = list(range = c(-30, 60)), \n    lataxis = list(range = c(-40, 82)), \n    resolution = 50, landcolor=\"aliceblue\"), \n  paper_bgcolor = \"white\", \n  font = list(family = \"Palatino\"), \n  legend=list(x=1.05, y=0.5, borderwidth=1, bordercolor='black', title=\"Obesity Rate\")\n)\n\nmalnourished_map &lt;- plot_ly(\n  data = country_avgs,\n  z = ~Avg_Malnour_Perc,\n  locations = ~region,\n  locationmode = \"country names\",\n  type = \"choropleth\",\n  color = ~Avg_Malnour_Perc,\n  colors = custom_palette,\n  marker = list(line = list(color = \"black\", width = 1)),\n  text=~region,\n  hovertemplate = paste(\"%{text}'s Malnourishment Rate = %{z:.2f}%\", \"&lt;extra&gt;&lt;/extra&gt;\")\n) %&gt;%\ncolorbar(title = \"&lt;b&gt;Rate&lt;b&gt;\")%&gt;%\nlayout(\n  title = \"&lt;b&gt;Average Malnourishment Rate (2000-2016)&lt;b&gt;\",\n  geo = list(scope = \"world\", projection = list(type = \"equirectangular\"), showlakes = FALSE,\n    showland = TRUE,\n    showcountries = TRUE,\n    showcoastlines = TRUE,\n    showframe = TRUE,\n    countrycolor = \"black\",\n    countrywidth = 0.5,\n    lonaxis = list(range = c(-30, 60)), \n    lataxis = list(range = c(-40, 82)), \n    resolution = 50, landcolor=\"aliceblue\"), paper_bgcolor = \"white\", font = list(family = \"Palatino\")\n)\n\nobesity_map\n\n\n\n\nmalnourished_map"
  }
]